{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCRadioFoundation } from './foundation';\n\nvar MDCRadio =\n/** @class */\nfunction (_super) {\n  __extends(MDCRadio, _super);\n\n  function MDCRadio() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ripple_ = _this.createRipple_();\n    return _this;\n  }\n\n  MDCRadio.attachTo = function (root) {\n    return new MDCRadio(root);\n  };\n\n  Object.defineProperty(MDCRadio.prototype, \"checked\", {\n    get: function () {\n      return this.nativeControl_.checked;\n    },\n    set: function (checked) {\n      this.nativeControl_.checked = checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCRadio.prototype, \"disabled\", {\n    get: function () {\n      return this.nativeControl_.disabled;\n    },\n    set: function (disabled) {\n      this.foundation.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCRadio.prototype, \"value\", {\n    get: function () {\n      return this.nativeControl_.value;\n    },\n    set: function (value) {\n      this.nativeControl_.value = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCRadio.prototype, \"ripple\", {\n    get: function () {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCRadio.prototype.destroy = function () {\n    this.ripple_.destroy();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCRadio.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      setNativeControlDisabled: function (disabled) {\n        return _this.nativeControl_.disabled = disabled;\n      }\n    };\n    return new MDCRadioFoundation(adapter);\n  };\n\n  MDCRadio.prototype.createRipple_ = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), {\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.nativeControl_.addEventListener(evtType, handler, applyPassive());\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.nativeControl_.removeEventListener(evtType, handler, applyPassive());\n      },\n      // Radio buttons technically go \"active\" whenever there is *any* keyboard interaction.\n      // This is not the UI we desire.\n      isSurfaceActive: function () {\n        return false;\n      },\n      isUnbounded: function () {\n        return true;\n      }\n    }); // tslint:enable:object-literal-sort-keys\n\n\n    return new MDCRipple(this.root, new MDCRippleFoundation(adapter));\n  };\n\n  Object.defineProperty(MDCRadio.prototype, \"nativeControl_\", {\n    get: function () {\n      var NATIVE_CONTROL_SELECTOR = MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;\n      var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);\n\n      if (!el) {\n        throw new Error(\"Radio component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n      }\n\n      return el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MDCRadio;\n}(MDCComponent);\n\nexport { MDCRadio };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCRadioFoundation } from './foundation';\nvar MDCRadio = /** @class */ (function (_super) {\n    __extends(MDCRadio, _super);\n    function MDCRadio() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.ripple_ = _this.createRipple_();\n        return _this;\n    }\n    MDCRadio.attachTo = function (root) {\n        return new MDCRadio(root);\n    };\n    Object.defineProperty(MDCRadio.prototype, \"checked\", {\n        get: function () {\n            return this.nativeControl_.checked;\n        },\n        set: function (checked) {\n            this.nativeControl_.checked = checked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCRadio.prototype, \"disabled\", {\n        get: function () {\n            return this.nativeControl_.disabled;\n        },\n        set: function (disabled) {\n            this.foundation.setDisabled(disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCRadio.prototype, \"value\", {\n        get: function () {\n            return this.nativeControl_.value;\n        },\n        set: function (value) {\n            this.nativeControl_.value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCRadio.prototype, \"ripple\", {\n        get: function () {\n            return this.ripple_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCRadio.prototype.destroy = function () {\n        this.ripple_.destroy();\n        _super.prototype.destroy.call(this);\n    };\n    MDCRadio.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            setNativeControlDisabled: function (disabled) { return _this.nativeControl_.disabled =\n                disabled; },\n        };\n        return new MDCRadioFoundation(adapter);\n    };\n    MDCRadio.prototype.createRipple_ = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { registerInteractionHandler: function (evtType, handler) { return _this.nativeControl_.addEventListener(evtType, handler, applyPassive()); }, deregisterInteractionHandler: function (evtType, handler) { return _this.nativeControl_.removeEventListener(evtType, handler, applyPassive()); }, \n            // Radio buttons technically go \"active\" whenever there is *any* keyboard interaction.\n            // This is not the UI we desire.\n            isSurfaceActive: function () { return false; }, isUnbounded: function () { return true; } });\n        // tslint:enable:object-literal-sort-keys\n        return new MDCRipple(this.root, new MDCRippleFoundation(adapter));\n    };\n    Object.defineProperty(MDCRadio.prototype, \"nativeControl_\", {\n        get: function () {\n            var NATIVE_CONTROL_SELECTOR = MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;\n            var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);\n            if (!el) {\n                throw new Error(\"Radio component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n            }\n            return el;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MDCRadio;\n}(MDCComponent));\nexport { MDCRadio };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}