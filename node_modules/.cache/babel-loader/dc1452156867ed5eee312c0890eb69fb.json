{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read, __spread } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCSwitchFoundation } from './foundation';\n\nvar MDCSwitch =\n/** @class */\nfunction (_super) {\n  __extends(MDCSwitch, _super);\n\n  function MDCSwitch() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ripple_ = _this.createRipple_();\n    return _this;\n  }\n\n  MDCSwitch.attachTo = function (root) {\n    return new MDCSwitch(root);\n  };\n\n  MDCSwitch.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.ripple_.destroy();\n    this.nativeControl_.removeEventListener('change', this.changeHandler_);\n  };\n\n  MDCSwitch.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.changeHandler_ = function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return (_a = _this.foundation).handleChange.apply(_a, __spread(args));\n    };\n\n    this.nativeControl_.addEventListener('change', this.changeHandler_); // Sometimes the checked state of the input element is saved in the history.\n    // The switch styling should match the checked state of the input element.\n    // Do an initial sync between the native control and the foundation.\n\n    this.checked = this.checked;\n  };\n\n  MDCSwitch.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      setNativeControlChecked: function (checked) {\n        return _this.nativeControl_.checked = checked;\n      },\n      setNativeControlDisabled: function (disabled) {\n        return _this.nativeControl_.disabled = disabled;\n      },\n      setNativeControlAttr: function (attr, value) {\n        return _this.nativeControl_.setAttribute(attr, value);\n      }\n    };\n    return new MDCSwitchFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCSwitch.prototype, \"ripple\", {\n    get: function () {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSwitch.prototype, \"checked\", {\n    get: function () {\n      return this.nativeControl_.checked;\n    },\n    set: function (checked) {\n      this.foundation.setChecked(checked);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSwitch.prototype, \"disabled\", {\n    get: function () {\n      return this.nativeControl_.disabled;\n    },\n    set: function (disabled) {\n      this.foundation.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCSwitch.prototype.createRipple_ = function () {\n    var _this = this;\n\n    var RIPPLE_SURFACE_SELECTOR = MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;\n    var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR); // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n    var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), {\n      addClass: function (className) {\n        return rippleSurface.classList.add(className);\n      },\n      computeBoundingRect: function () {\n        return rippleSurface.getBoundingClientRect();\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        _this.nativeControl_.removeEventListener(evtType, handler, applyPassive());\n      },\n      isSurfaceActive: function () {\n        return matches(_this.nativeControl_, ':active');\n      },\n      isUnbounded: function () {\n        return true;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        _this.nativeControl_.addEventListener(evtType, handler, applyPassive());\n      },\n      removeClass: function (className) {\n        rippleSurface.classList.remove(className);\n      },\n      updateCssVariable: function (varName, value) {\n        rippleSurface.style.setProperty(varName, value);\n      }\n    });\n\n    return new MDCRipple(this.root, new MDCRippleFoundation(adapter));\n  };\n\n  Object.defineProperty(MDCSwitch.prototype, \"nativeControl_\", {\n    get: function () {\n      var NATIVE_CONTROL_SELECTOR = MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;\n      return this.root.querySelector(NATIVE_CONTROL_SELECTOR);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MDCSwitch;\n}(MDCComponent);\n\nexport { MDCSwitch };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read, __spread } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCSwitchFoundation } from './foundation';\nvar MDCSwitch = /** @class */ (function (_super) {\n    __extends(MDCSwitch, _super);\n    function MDCSwitch() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.ripple_ = _this.createRipple_();\n        return _this;\n    }\n    MDCSwitch.attachTo = function (root) {\n        return new MDCSwitch(root);\n    };\n    MDCSwitch.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.ripple_.destroy();\n        this.nativeControl_.removeEventListener('change', this.changeHandler_);\n    };\n    MDCSwitch.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.changeHandler_ = function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return (_a = _this.foundation).handleChange.apply(_a, __spread(args));\n        };\n        this.nativeControl_.addEventListener('change', this.changeHandler_);\n        // Sometimes the checked state of the input element is saved in the history.\n        // The switch styling should match the checked state of the input element.\n        // Do an initial sync between the native control and the foundation.\n        this.checked = this.checked;\n    };\n    MDCSwitch.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            setNativeControlChecked: function (checked) { return _this.nativeControl_.checked =\n                checked; },\n            setNativeControlDisabled: function (disabled) { return _this.nativeControl_.disabled =\n                disabled; },\n            setNativeControlAttr: function (attr, value) {\n                return _this.nativeControl_.setAttribute(attr, value);\n            },\n        };\n        return new MDCSwitchFoundation(adapter);\n    };\n    Object.defineProperty(MDCSwitch.prototype, \"ripple\", {\n        get: function () {\n            return this.ripple_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSwitch.prototype, \"checked\", {\n        get: function () {\n            return this.nativeControl_.checked;\n        },\n        set: function (checked) {\n            this.foundation.setChecked(checked);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSwitch.prototype, \"disabled\", {\n        get: function () {\n            return this.nativeControl_.disabled;\n        },\n        set: function (disabled) {\n            this.foundation.setDisabled(disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCSwitch.prototype.createRipple_ = function () {\n        var _this = this;\n        var RIPPLE_SURFACE_SELECTOR = MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;\n        var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { addClass: function (className) { return rippleSurface.classList.add(className); }, computeBoundingRect: function () { return rippleSurface.getBoundingClientRect(); }, deregisterInteractionHandler: function (evtType, handler) {\n                _this.nativeControl_.removeEventListener(evtType, handler, applyPassive());\n            }, isSurfaceActive: function () { return matches(_this.nativeControl_, ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) {\n                _this.nativeControl_.addEventListener(evtType, handler, applyPassive());\n            }, removeClass: function (className) {\n                rippleSurface.classList.remove(className);\n            }, updateCssVariable: function (varName, value) {\n                rippleSurface.style.setProperty(varName, value);\n            } });\n        return new MDCRipple(this.root, new MDCRippleFoundation(adapter));\n    };\n    Object.defineProperty(MDCSwitch.prototype, \"nativeControl_\", {\n        get: function () {\n            var NATIVE_CONTROL_SELECTOR = MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;\n            return this.root.querySelector(NATIVE_CONTROL_SELECTOR);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MDCSwitch;\n}(MDCComponent));\nexport { MDCSwitch };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}