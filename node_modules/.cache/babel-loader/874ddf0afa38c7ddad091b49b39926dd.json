{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCCircularProgressFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCCircularProgressFoundation, _super);\n\n  function MDCCircularProgressFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCCircularProgressFoundation.defaultAdapter), adapter)) || this;\n  }\n\n  Object.defineProperty(MDCCircularProgressFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCircularProgressFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCircularProgressFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        getDeterminateCircleAttribute: function () {\n          return null;\n        },\n        hasClass: function () {\n          return false;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        removeAttribute: function () {\n          return undefined;\n        },\n        setAttribute: function () {\n          return undefined;\n        },\n        setDeterminateCircleAttribute: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCCircularProgressFoundation.prototype.init = function () {\n    this.isClosed_ = this.adapter.hasClass(cssClasses.CLOSED_CLASS);\n    this.isDeterminate_ = !this.adapter.hasClass(cssClasses.INDETERMINATE_CLASS);\n    this.progress_ = 0;\n\n    if (this.isDeterminate_) {\n      this.adapter.setAttribute(strings.ARIA_VALUENOW, this.progress_.toString());\n    }\n\n    this.radius_ = Number(this.adapter.getDeterminateCircleAttribute(strings.RADIUS));\n  };\n\n  MDCCircularProgressFoundation.prototype.isDeterminate = function () {\n    return this.isDeterminate_;\n  };\n\n  MDCCircularProgressFoundation.prototype.getProgress = function () {\n    return this.progress_;\n  };\n  /**\n   * @return Returns whether the progress indicator is hidden.\n   */\n\n\n  MDCCircularProgressFoundation.prototype.isClosed = function () {\n    return this.isClosed_;\n  };\n  /**\n   * Sets whether the progress indicator is in determinate mode.\n   * @param isDeterminate Whether the indicator should be determinate.\n   */\n\n\n  MDCCircularProgressFoundation.prototype.setDeterminate = function (isDeterminate) {\n    this.isDeterminate_ = isDeterminate;\n\n    if (this.isDeterminate_) {\n      this.adapter.removeClass(cssClasses.INDETERMINATE_CLASS);\n      this.setProgress(this.progress_);\n    } else {\n      this.adapter.addClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter.removeAttribute(strings.ARIA_VALUENOW);\n    }\n  };\n  /**\n   * Sets the current progress value. In indeterminate mode, this has no\n   * visual effect but will be reflected if the indicator is switched to\n   * determinate mode.\n   * @param value The current progress value, which must be between 0 and 1.\n   */\n\n\n  MDCCircularProgressFoundation.prototype.setProgress = function (value) {\n    this.progress_ = value;\n\n    if (this.isDeterminate_) {\n      var unfilledArcLength = (1 - this.progress_) * (2 * Math.PI * this.radius_);\n      this.adapter.setDeterminateCircleAttribute(strings.STROKE_DASHOFFSET, \"\" + unfilledArcLength);\n      this.adapter.setAttribute(strings.ARIA_VALUENOW, this.progress_.toString());\n    }\n  };\n  /**\n   * Shows the progress indicator.\n   */\n\n\n  MDCCircularProgressFoundation.prototype.open = function () {\n    this.isClosed_ = false;\n    this.adapter.removeClass(cssClasses.CLOSED_CLASS);\n  };\n  /**\n   * Hides the progress indicator\n   */\n\n\n  MDCCircularProgressFoundation.prototype.close = function () {\n    this.isClosed_ = true;\n    this.adapter.addClass(cssClasses.CLOSED_CLASS);\n  };\n\n  return MDCCircularProgressFoundation;\n}(MDCFoundation);\n\nexport { MDCCircularProgressFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCCircularProgressFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCCircularProgressFoundation = /** @class */ (function (_super) {\n    __extends(MDCCircularProgressFoundation, _super);\n    function MDCCircularProgressFoundation(adapter) {\n        return _super.call(this, __assign(__assign({}, MDCCircularProgressFoundation.defaultAdapter), adapter)) || this;\n    }\n    Object.defineProperty(MDCCircularProgressFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCircularProgressFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCircularProgressFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                getDeterminateCircleAttribute: function () { return null; },\n                hasClass: function () { return false; },\n                removeClass: function () { return undefined; },\n                removeAttribute: function () { return undefined; },\n                setAttribute: function () { return undefined; },\n                setDeterminateCircleAttribute: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCCircularProgressFoundation.prototype.init = function () {\n        this.isClosed_ = this.adapter.hasClass(cssClasses.CLOSED_CLASS);\n        this.isDeterminate_ =\n            !this.adapter.hasClass(cssClasses.INDETERMINATE_CLASS);\n        this.progress_ = 0;\n        if (this.isDeterminate_) {\n            this.adapter.setAttribute(strings.ARIA_VALUENOW, this.progress_.toString());\n        }\n        this.radius_ =\n            Number(this.adapter.getDeterminateCircleAttribute(strings.RADIUS));\n    };\n    MDCCircularProgressFoundation.prototype.isDeterminate = function () {\n        return this.isDeterminate_;\n    };\n    MDCCircularProgressFoundation.prototype.getProgress = function () {\n        return this.progress_;\n    };\n    /**\n     * @return Returns whether the progress indicator is hidden.\n     */\n    MDCCircularProgressFoundation.prototype.isClosed = function () {\n        return this.isClosed_;\n    };\n    /**\n     * Sets whether the progress indicator is in determinate mode.\n     * @param isDeterminate Whether the indicator should be determinate.\n     */\n    MDCCircularProgressFoundation.prototype.setDeterminate = function (isDeterminate) {\n        this.isDeterminate_ = isDeterminate;\n        if (this.isDeterminate_) {\n            this.adapter.removeClass(cssClasses.INDETERMINATE_CLASS);\n            this.setProgress(this.progress_);\n        }\n        else {\n            this.adapter.addClass(cssClasses.INDETERMINATE_CLASS);\n            this.adapter.removeAttribute(strings.ARIA_VALUENOW);\n        }\n    };\n    /**\n     * Sets the current progress value. In indeterminate mode, this has no\n     * visual effect but will be reflected if the indicator is switched to\n     * determinate mode.\n     * @param value The current progress value, which must be between 0 and 1.\n     */\n    MDCCircularProgressFoundation.prototype.setProgress = function (value) {\n        this.progress_ = value;\n        if (this.isDeterminate_) {\n            var unfilledArcLength = (1 - this.progress_) * (2 * Math.PI * this.radius_);\n            this.adapter.setDeterminateCircleAttribute(strings.STROKE_DASHOFFSET, \"\" + unfilledArcLength);\n            this.adapter.setAttribute(strings.ARIA_VALUENOW, this.progress_.toString());\n        }\n    };\n    /**\n     * Shows the progress indicator.\n     */\n    MDCCircularProgressFoundation.prototype.open = function () {\n        this.isClosed_ = false;\n        this.adapter.removeClass(cssClasses.CLOSED_CLASS);\n    };\n    /**\n     * Hides the progress indicator\n     */\n    MDCCircularProgressFoundation.prototype.close = function () {\n        this.isClosed_ = true;\n        this.adapter.addClass(cssClasses.CLOSED_CLASS);\n    };\n    return MDCCircularProgressFoundation;\n}(MDCFoundation));\nexport { MDCCircularProgressFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCCircularProgressFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}