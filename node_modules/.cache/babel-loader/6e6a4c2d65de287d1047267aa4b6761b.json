{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Direction, EventSource, jumpChipKeys, navigationKeys, strings as chipStrings } from '../chip/constants';\nimport { cssClasses, strings } from './constants';\n\nvar MDCChipSetFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCChipSetFoundation, _super);\n\n  function MDCChipSetFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation.defaultAdapter), adapter)) || this;\n    /**\n     * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n     */\n\n\n    _this.selectedChipIds_ = [];\n    return _this;\n  }\n\n  Object.defineProperty(MDCChipSetFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSetFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSetFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        announceMessage: function () {\n          return undefined;\n        },\n        focusChipPrimaryActionAtIndex: function () {\n          return undefined;\n        },\n        focusChipTrailingActionAtIndex: function () {\n          return undefined;\n        },\n        getChipListCount: function () {\n          return -1;\n        },\n        getIndexOfChipById: function () {\n          return -1;\n        },\n        hasClass: function () {\n          return false;\n        },\n        isRTL: function () {\n          return false;\n        },\n        removeChipAtIndex: function () {\n          return undefined;\n        },\n        removeFocusFromChipAtIndex: function () {\n          return undefined;\n        },\n        selectChipAtIndex: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an array of the IDs of all selected chips.\n   */\n\n  MDCChipSetFoundation.prototype.getSelectedChipIds = function () {\n    return this.selectedChipIds_.slice();\n  };\n  /**\n   * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n   * Does not notify clients of the updated selection state.\n   */\n\n\n  MDCChipSetFoundation.prototype.select = function (chipId) {\n    this.select_(chipId, false);\n  };\n  /**\n   * Handles a chip interaction event\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipInteraction = function (_a) {\n    var chipId = _a.chipId;\n    var index = this.adapter.getIndexOfChipById(chipId);\n    this.removeFocusFromChipsExcept_(index);\n\n    if (this.adapter.hasClass(cssClasses.CHOICE) || this.adapter.hasClass(cssClasses.FILTER)) {\n      this.toggleSelect_(chipId);\n    }\n  };\n  /**\n   * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipSelection = function (_a) {\n    var chipId = _a.chipId,\n        selected = _a.selected,\n        shouldIgnore = _a.shouldIgnore; // Early exit if we should ignore the event\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n\n    if (selected && !chipIsSelected) {\n      this.select(chipId);\n    } else if (!selected && chipIsSelected) {\n      this.deselect_(chipId);\n    }\n  };\n  /**\n   * Handles the event when a chip is removed.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipRemoval = function (_a) {\n    var chipId = _a.chipId,\n        removedAnnouncement = _a.removedAnnouncement;\n\n    if (removedAnnouncement) {\n      this.adapter.announceMessage(removedAnnouncement);\n    }\n\n    var index = this.adapter.getIndexOfChipById(chipId);\n    this.deselectAndNotifyClients_(chipId);\n    this.adapter.removeChipAtIndex(index);\n    var maxIndex = this.adapter.getChipListCount() - 1;\n    var nextIndex = Math.min(index, maxIndex);\n    this.removeFocusFromChipsExcept_(nextIndex); // After removing a chip, we should focus the trailing action for the next chip.\n\n    this.adapter.focusChipTrailingActionAtIndex(nextIndex);\n  };\n  /**\n   * Handles a chip navigation event.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipNavigation = function (_a) {\n    var chipId = _a.chipId,\n        key = _a.key,\n        source = _a.source;\n    var maxIndex = this.adapter.getChipListCount() - 1;\n    var index = this.adapter.getIndexOfChipById(chipId); // Early exit if the index is out of range or the key is unusable\n\n    if (index === -1 || !navigationKeys.has(key)) {\n      return;\n    }\n\n    var isRTL = this.adapter.isRTL();\n    var isLeftKey = key === chipStrings.ARROW_LEFT_KEY || key === chipStrings.IE_ARROW_LEFT_KEY;\n    var isRightKey = key === chipStrings.ARROW_RIGHT_KEY || key === chipStrings.IE_ARROW_RIGHT_KEY;\n    var isDownKey = key === chipStrings.ARROW_DOWN_KEY || key === chipStrings.IE_ARROW_DOWN_KEY;\n    var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;\n    var isHome = key === chipStrings.HOME_KEY;\n    var isEnd = key === chipStrings.END_KEY;\n\n    if (shouldIncrement) {\n      index++;\n    } else if (isHome) {\n      index = 0;\n    } else if (isEnd) {\n      index = maxIndex;\n    } else {\n      index--;\n    } // Early exit if the index is out of bounds\n\n\n    if (index < 0 || index > maxIndex) {\n      return;\n    }\n\n    this.removeFocusFromChipsExcept_(index);\n    this.focusChipAction_(index, key, source);\n  };\n\n  MDCChipSetFoundation.prototype.focusChipAction_ = function (index, key, source) {\n    var shouldJumpChips = jumpChipKeys.has(key);\n\n    if (shouldJumpChips && source === EventSource.PRIMARY) {\n      return this.adapter.focusChipPrimaryActionAtIndex(index);\n    }\n\n    if (shouldJumpChips && source === EventSource.TRAILING) {\n      return this.adapter.focusChipTrailingActionAtIndex(index);\n    }\n\n    var dir = this.getDirection_(key);\n\n    if (dir === Direction.LEFT) {\n      return this.adapter.focusChipTrailingActionAtIndex(index);\n    }\n\n    if (dir === Direction.RIGHT) {\n      return this.adapter.focusChipPrimaryActionAtIndex(index);\n    }\n  };\n\n  MDCChipSetFoundation.prototype.getDirection_ = function (key) {\n    var isRTL = this.adapter.isRTL();\n    var isLeftKey = key === chipStrings.ARROW_LEFT_KEY || key === chipStrings.IE_ARROW_LEFT_KEY;\n    var isRightKey = key === chipStrings.ARROW_RIGHT_KEY || key === chipStrings.IE_ARROW_RIGHT_KEY;\n\n    if (!isRTL && isLeftKey || isRTL && isRightKey) {\n      return Direction.LEFT;\n    }\n\n    return Direction.RIGHT;\n  };\n  /**\n   * Deselects the chip with the given id and optionally notifies clients.\n   */\n\n\n  MDCChipSetFoundation.prototype.deselect_ = function (chipId, shouldNotifyClients) {\n    if (shouldNotifyClients === void 0) {\n      shouldNotifyClients = false;\n    }\n\n    var index = this.selectedChipIds_.indexOf(chipId);\n\n    if (index >= 0) {\n      this.selectedChipIds_.splice(index, 1);\n      var chipIndex = this.adapter.getIndexOfChipById(chipId);\n      this.adapter.selectChipAtIndex(chipIndex,\n      /** isSelected */\n      false, shouldNotifyClients);\n    }\n  };\n  /**\n   * Deselects the chip with the given id and notifies clients.\n   */\n\n\n  MDCChipSetFoundation.prototype.deselectAndNotifyClients_ = function (chipId) {\n    this.deselect_(chipId, true);\n  };\n  /**\n   * Toggles selection of the chip with the given id.\n   */\n\n\n  MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      this.deselectAndNotifyClients_(chipId);\n    } else {\n      this.selectAndNotifyClients_(chipId);\n    }\n  };\n\n  MDCChipSetFoundation.prototype.removeFocusFromChipsExcept_ = function (index) {\n    var chipCount = this.adapter.getChipListCount();\n\n    for (var i = 0; i < chipCount; i++) {\n      if (i !== index) {\n        this.adapter.removeFocusFromChipAtIndex(i);\n      }\n    }\n  };\n\n  MDCChipSetFoundation.prototype.selectAndNotifyClients_ = function (chipId) {\n    this.select_(chipId, true);\n  };\n\n  MDCChipSetFoundation.prototype.select_ = function (chipId, shouldNotifyClients) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      return;\n    }\n\n    if (this.adapter.hasClass(cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {\n      var previouslySelectedChip = this.selectedChipIds_[0];\n      var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);\n      this.selectedChipIds_ = [];\n      this.adapter.selectChipAtIndex(previouslySelectedIndex,\n      /** isSelected */\n      false, shouldNotifyClients);\n    }\n\n    this.selectedChipIds_.push(chipId);\n    var index = this.adapter.getIndexOfChipById(chipId);\n    this.adapter.selectChipAtIndex(index,\n    /** isSelected */\n    true, shouldNotifyClients);\n  };\n\n  return MDCChipSetFoundation;\n}(MDCFoundation);\n\nexport { MDCChipSetFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCChipSetFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Direction, EventSource, jumpChipKeys, navigationKeys, strings as chipStrings } from '../chip/constants';\nimport { cssClasses, strings } from './constants';\nvar MDCChipSetFoundation = /** @class */ (function (_super) {\n    __extends(MDCChipSetFoundation, _super);\n    function MDCChipSetFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation.defaultAdapter), adapter)) || this;\n        /**\n         * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n         */\n        _this.selectedChipIds_ = [];\n        return _this;\n    }\n    Object.defineProperty(MDCChipSetFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipSetFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipSetFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                announceMessage: function () { return undefined; },\n                focusChipPrimaryActionAtIndex: function () { return undefined; },\n                focusChipTrailingActionAtIndex: function () { return undefined; },\n                getChipListCount: function () { return -1; },\n                getIndexOfChipById: function () { return -1; },\n                hasClass: function () { return false; },\n                isRTL: function () { return false; },\n                removeChipAtIndex: function () { return undefined; },\n                removeFocusFromChipAtIndex: function () { return undefined; },\n                selectChipAtIndex: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns an array of the IDs of all selected chips.\n     */\n    MDCChipSetFoundation.prototype.getSelectedChipIds = function () {\n        return this.selectedChipIds_.slice();\n    };\n    /**\n     * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n     * Does not notify clients of the updated selection state.\n     */\n    MDCChipSetFoundation.prototype.select = function (chipId) {\n        this.select_(chipId, false);\n    };\n    /**\n     * Handles a chip interaction event\n     */\n    MDCChipSetFoundation.prototype.handleChipInteraction = function (_a) {\n        var chipId = _a.chipId;\n        var index = this.adapter.getIndexOfChipById(chipId);\n        this.removeFocusFromChipsExcept_(index);\n        if (this.adapter.hasClass(cssClasses.CHOICE) ||\n            this.adapter.hasClass(cssClasses.FILTER)) {\n            this.toggleSelect_(chipId);\n        }\n    };\n    /**\n     * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n     */\n    MDCChipSetFoundation.prototype.handleChipSelection = function (_a) {\n        var chipId = _a.chipId, selected = _a.selected, shouldIgnore = _a.shouldIgnore;\n        // Early exit if we should ignore the event\n        if (shouldIgnore) {\n            return;\n        }\n        var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n        if (selected && !chipIsSelected) {\n            this.select(chipId);\n        }\n        else if (!selected && chipIsSelected) {\n            this.deselect_(chipId);\n        }\n    };\n    /**\n     * Handles the event when a chip is removed.\n     */\n    MDCChipSetFoundation.prototype.handleChipRemoval = function (_a) {\n        var chipId = _a.chipId, removedAnnouncement = _a.removedAnnouncement;\n        if (removedAnnouncement) {\n            this.adapter.announceMessage(removedAnnouncement);\n        }\n        var index = this.adapter.getIndexOfChipById(chipId);\n        this.deselectAndNotifyClients_(chipId);\n        this.adapter.removeChipAtIndex(index);\n        var maxIndex = this.adapter.getChipListCount() - 1;\n        var nextIndex = Math.min(index, maxIndex);\n        this.removeFocusFromChipsExcept_(nextIndex);\n        // After removing a chip, we should focus the trailing action for the next chip.\n        this.adapter.focusChipTrailingActionAtIndex(nextIndex);\n    };\n    /**\n     * Handles a chip navigation event.\n     */\n    MDCChipSetFoundation.prototype.handleChipNavigation = function (_a) {\n        var chipId = _a.chipId, key = _a.key, source = _a.source;\n        var maxIndex = this.adapter.getChipListCount() - 1;\n        var index = this.adapter.getIndexOfChipById(chipId);\n        // Early exit if the index is out of range or the key is unusable\n        if (index === -1 || !navigationKeys.has(key)) {\n            return;\n        }\n        var isRTL = this.adapter.isRTL();\n        var isLeftKey = key === chipStrings.ARROW_LEFT_KEY ||\n            key === chipStrings.IE_ARROW_LEFT_KEY;\n        var isRightKey = key === chipStrings.ARROW_RIGHT_KEY ||\n            key === chipStrings.IE_ARROW_RIGHT_KEY;\n        var isDownKey = key === chipStrings.ARROW_DOWN_KEY ||\n            key === chipStrings.IE_ARROW_DOWN_KEY;\n        var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;\n        var isHome = key === chipStrings.HOME_KEY;\n        var isEnd = key === chipStrings.END_KEY;\n        if (shouldIncrement) {\n            index++;\n        }\n        else if (isHome) {\n            index = 0;\n        }\n        else if (isEnd) {\n            index = maxIndex;\n        }\n        else {\n            index--;\n        }\n        // Early exit if the index is out of bounds\n        if (index < 0 || index > maxIndex) {\n            return;\n        }\n        this.removeFocusFromChipsExcept_(index);\n        this.focusChipAction_(index, key, source);\n    };\n    MDCChipSetFoundation.prototype.focusChipAction_ = function (index, key, source) {\n        var shouldJumpChips = jumpChipKeys.has(key);\n        if (shouldJumpChips && source === EventSource.PRIMARY) {\n            return this.adapter.focusChipPrimaryActionAtIndex(index);\n        }\n        if (shouldJumpChips && source === EventSource.TRAILING) {\n            return this.adapter.focusChipTrailingActionAtIndex(index);\n        }\n        var dir = this.getDirection_(key);\n        if (dir === Direction.LEFT) {\n            return this.adapter.focusChipTrailingActionAtIndex(index);\n        }\n        if (dir === Direction.RIGHT) {\n            return this.adapter.focusChipPrimaryActionAtIndex(index);\n        }\n    };\n    MDCChipSetFoundation.prototype.getDirection_ = function (key) {\n        var isRTL = this.adapter.isRTL();\n        var isLeftKey = key === chipStrings.ARROW_LEFT_KEY ||\n            key === chipStrings.IE_ARROW_LEFT_KEY;\n        var isRightKey = key === chipStrings.ARROW_RIGHT_KEY ||\n            key === chipStrings.IE_ARROW_RIGHT_KEY;\n        if (!isRTL && isLeftKey || isRTL && isRightKey) {\n            return Direction.LEFT;\n        }\n        return Direction.RIGHT;\n    };\n    /**\n     * Deselects the chip with the given id and optionally notifies clients.\n     */\n    MDCChipSetFoundation.prototype.deselect_ = function (chipId, shouldNotifyClients) {\n        if (shouldNotifyClients === void 0) { shouldNotifyClients = false; }\n        var index = this.selectedChipIds_.indexOf(chipId);\n        if (index >= 0) {\n            this.selectedChipIds_.splice(index, 1);\n            var chipIndex = this.adapter.getIndexOfChipById(chipId);\n            this.adapter.selectChipAtIndex(chipIndex, /** isSelected */ false, shouldNotifyClients);\n        }\n    };\n    /**\n     * Deselects the chip with the given id and notifies clients.\n     */\n    MDCChipSetFoundation.prototype.deselectAndNotifyClients_ = function (chipId) {\n        this.deselect_(chipId, true);\n    };\n    /**\n     * Toggles selection of the chip with the given id.\n     */\n    MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {\n        if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n            this.deselectAndNotifyClients_(chipId);\n        }\n        else {\n            this.selectAndNotifyClients_(chipId);\n        }\n    };\n    MDCChipSetFoundation.prototype.removeFocusFromChipsExcept_ = function (index) {\n        var chipCount = this.adapter.getChipListCount();\n        for (var i = 0; i < chipCount; i++) {\n            if (i !== index) {\n                this.adapter.removeFocusFromChipAtIndex(i);\n            }\n        }\n    };\n    MDCChipSetFoundation.prototype.selectAndNotifyClients_ = function (chipId) {\n        this.select_(chipId, true);\n    };\n    MDCChipSetFoundation.prototype.select_ = function (chipId, shouldNotifyClients) {\n        if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n            return;\n        }\n        if (this.adapter.hasClass(cssClasses.CHOICE) &&\n            this.selectedChipIds_.length > 0) {\n            var previouslySelectedChip = this.selectedChipIds_[0];\n            var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);\n            this.selectedChipIds_ = [];\n            this.adapter.selectChipAtIndex(previouslySelectedIndex, /** isSelected */ false, shouldNotifyClients);\n        }\n        this.selectedChipIds_.push(chipId);\n        var index = this.adapter.getIndexOfChipById(chipId);\n        this.adapter.selectChipAtIndex(index, /** isSelected */ true, shouldNotifyClients);\n    };\n    return MDCChipSetFoundation;\n}(MDCFoundation));\nexport { MDCChipSetFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCChipSetFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}