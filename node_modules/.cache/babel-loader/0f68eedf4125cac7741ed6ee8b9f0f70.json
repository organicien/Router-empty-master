{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from '../constants';\n\nvar MDCDismissibleDrawerFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCDismissibleDrawerFoundation, _super);\n\n  function MDCDismissibleDrawerFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter), adapter)) || this;\n\n    _this.animationFrame_ = 0;\n    _this.animationTimer_ = 0;\n    return _this;\n  }\n\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDismissibleDrawerFoundation, \"defaultAdapter\", {\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        elementHasClass: function () {\n          return false;\n        },\n        notifyClose: function () {\n          return undefined;\n        },\n        notifyOpen: function () {\n          return undefined;\n        },\n        saveFocus: function () {\n          return undefined;\n        },\n        restoreFocus: function () {\n          return undefined;\n        },\n        focusActiveNavigationItem: function () {\n          return undefined;\n        },\n        trapFocus: function () {\n          return undefined;\n        },\n        releaseFocus: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCDismissibleDrawerFoundation.prototype.destroy = function () {\n    if (this.animationFrame_) {\n      cancelAnimationFrame(this.animationFrame_);\n    }\n\n    if (this.animationTimer_) {\n      clearTimeout(this.animationTimer_);\n    }\n  };\n  /**\n   * Opens the drawer from the closed state.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.open = function () {\n    var _this = this;\n\n    if (this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter.addClass(cssClasses.OPEN);\n    this.adapter.addClass(cssClasses.ANIMATE); // Wait a frame once display is no longer \"none\", to establish basis for animation\n\n    this.runNextAnimationFrame_(function () {\n      _this.adapter.addClass(cssClasses.OPENING);\n    });\n    this.adapter.saveFocus();\n  };\n  /**\n   * Closes the drawer from the open state.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.close = function () {\n    if (!this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter.addClass(cssClasses.CLOSING);\n  };\n  /**\n   * Returns true if the drawer is in the open position.\n   * @return true if drawer is in open state.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isOpen = function () {\n    return this.adapter.hasClass(cssClasses.OPEN);\n  };\n  /**\n   * Returns true if the drawer is animating open.\n   * @return true if drawer is animating open.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isOpening = function () {\n    return this.adapter.hasClass(cssClasses.OPENING) || this.adapter.hasClass(cssClasses.ANIMATE);\n  };\n  /**\n   * Returns true if the drawer is animating closed.\n   * @return true if drawer is animating closed.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.isClosing = function () {\n    return this.adapter.hasClass(cssClasses.CLOSING);\n  };\n  /**\n   * Keydown handler to close drawer when key is escape.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {\n    var keyCode = evt.keyCode,\n        key = evt.key;\n    var isEscape = key === 'Escape' || keyCode === 27;\n\n    if (isEscape) {\n      this.close();\n    }\n  };\n  /**\n   * Handles the `transitionend` event when the drawer finishes opening/closing.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {\n    var OPENING = cssClasses.OPENING,\n        CLOSING = cssClasses.CLOSING,\n        OPEN = cssClasses.OPEN,\n        ANIMATE = cssClasses.ANIMATE,\n        ROOT = cssClasses.ROOT; // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\n\n    var isRootElement = this.isElement_(evt.target) && this.adapter.elementHasClass(evt.target, ROOT);\n\n    if (!isRootElement) {\n      return;\n    }\n\n    if (this.isClosing()) {\n      this.adapter.removeClass(OPEN);\n      this.closed_();\n      this.adapter.restoreFocus();\n      this.adapter.notifyClose();\n    } else {\n      this.adapter.focusActiveNavigationItem();\n      this.opened_();\n      this.adapter.notifyOpen();\n    }\n\n    this.adapter.removeClass(ANIMATE);\n    this.adapter.removeClass(OPENING);\n    this.adapter.removeClass(CLOSING);\n  };\n  /**\n   * Extension point for when drawer finishes open animation.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.opened_ = function () {}; // tslint:disable-line:no-empty\n\n  /**\n   * Extension point for when drawer finishes close animation.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.closed_ = function () {}; // tslint:disable-line:no-empty\n\n  /**\n   * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n   */\n\n\n  MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n    var _this = this;\n\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = requestAnimationFrame(function () {\n      _this.animationFrame_ = 0;\n      clearTimeout(_this.animationTimer_);\n      _this.animationTimer_ = setTimeout(callback, 0);\n    });\n  };\n\n  MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {\n    // In Edge, transitionend on ripple pseudo-elements yields a target without classList.\n    return Boolean(element.classList);\n  };\n\n  return MDCDismissibleDrawerFoundation;\n}(MDCFoundation);\n\nexport { MDCDismissibleDrawerFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCDismissibleDrawerFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from '../constants';\nvar MDCDismissibleDrawerFoundation = /** @class */ (function (_super) {\n    __extends(MDCDismissibleDrawerFoundation, _super);\n    function MDCDismissibleDrawerFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter), adapter)) || this;\n        _this.animationFrame_ = 0;\n        _this.animationTimer_ = 0;\n        return _this;\n    }\n    Object.defineProperty(MDCDismissibleDrawerFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCDismissibleDrawerFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCDismissibleDrawerFoundation, \"defaultAdapter\", {\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                elementHasClass: function () { return false; },\n                notifyClose: function () { return undefined; },\n                notifyOpen: function () { return undefined; },\n                saveFocus: function () { return undefined; },\n                restoreFocus: function () { return undefined; },\n                focusActiveNavigationItem: function () { return undefined; },\n                trapFocus: function () { return undefined; },\n                releaseFocus: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCDismissibleDrawerFoundation.prototype.destroy = function () {\n        if (this.animationFrame_) {\n            cancelAnimationFrame(this.animationFrame_);\n        }\n        if (this.animationTimer_) {\n            clearTimeout(this.animationTimer_);\n        }\n    };\n    /**\n     * Opens the drawer from the closed state.\n     */\n    MDCDismissibleDrawerFoundation.prototype.open = function () {\n        var _this = this;\n        if (this.isOpen() || this.isOpening() || this.isClosing()) {\n            return;\n        }\n        this.adapter.addClass(cssClasses.OPEN);\n        this.adapter.addClass(cssClasses.ANIMATE);\n        // Wait a frame once display is no longer \"none\", to establish basis for animation\n        this.runNextAnimationFrame_(function () {\n            _this.adapter.addClass(cssClasses.OPENING);\n        });\n        this.adapter.saveFocus();\n    };\n    /**\n     * Closes the drawer from the open state.\n     */\n    MDCDismissibleDrawerFoundation.prototype.close = function () {\n        if (!this.isOpen() || this.isOpening() || this.isClosing()) {\n            return;\n        }\n        this.adapter.addClass(cssClasses.CLOSING);\n    };\n    /**\n     * Returns true if the drawer is in the open position.\n     * @return true if drawer is in open state.\n     */\n    MDCDismissibleDrawerFoundation.prototype.isOpen = function () {\n        return this.adapter.hasClass(cssClasses.OPEN);\n    };\n    /**\n     * Returns true if the drawer is animating open.\n     * @return true if drawer is animating open.\n     */\n    MDCDismissibleDrawerFoundation.prototype.isOpening = function () {\n        return this.adapter.hasClass(cssClasses.OPENING) ||\n            this.adapter.hasClass(cssClasses.ANIMATE);\n    };\n    /**\n     * Returns true if the drawer is animating closed.\n     * @return true if drawer is animating closed.\n     */\n    MDCDismissibleDrawerFoundation.prototype.isClosing = function () {\n        return this.adapter.hasClass(cssClasses.CLOSING);\n    };\n    /**\n     * Keydown handler to close drawer when key is escape.\n     */\n    MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {\n        var keyCode = evt.keyCode, key = evt.key;\n        var isEscape = key === 'Escape' || keyCode === 27;\n        if (isEscape) {\n            this.close();\n        }\n    };\n    /**\n     * Handles the `transitionend` event when the drawer finishes opening/closing.\n     */\n    MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {\n        var OPENING = cssClasses.OPENING, CLOSING = cssClasses.CLOSING, OPEN = cssClasses.OPEN, ANIMATE = cssClasses.ANIMATE, ROOT = cssClasses.ROOT;\n        // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\n        var isRootElement = this.isElement_(evt.target) &&\n            this.adapter.elementHasClass(evt.target, ROOT);\n        if (!isRootElement) {\n            return;\n        }\n        if (this.isClosing()) {\n            this.adapter.removeClass(OPEN);\n            this.closed_();\n            this.adapter.restoreFocus();\n            this.adapter.notifyClose();\n        }\n        else {\n            this.adapter.focusActiveNavigationItem();\n            this.opened_();\n            this.adapter.notifyOpen();\n        }\n        this.adapter.removeClass(ANIMATE);\n        this.adapter.removeClass(OPENING);\n        this.adapter.removeClass(CLOSING);\n    };\n    /**\n     * Extension point for when drawer finishes open animation.\n     */\n    MDCDismissibleDrawerFoundation.prototype.opened_ = function () { }; // tslint:disable-line:no-empty\n    /**\n     * Extension point for when drawer finishes close animation.\n     */\n    MDCDismissibleDrawerFoundation.prototype.closed_ = function () { }; // tslint:disable-line:no-empty\n    /**\n     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n     */\n    MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n        var _this = this;\n        cancelAnimationFrame(this.animationFrame_);\n        this.animationFrame_ = requestAnimationFrame(function () {\n            _this.animationFrame_ = 0;\n            clearTimeout(_this.animationTimer_);\n            _this.animationTimer_ = setTimeout(callback, 0);\n        });\n    };\n    MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {\n        // In Edge, transitionend on ripple pseudo-elements yields a target without classList.\n        return Boolean(element.classList);\n    };\n    return MDCDismissibleDrawerFoundation;\n}(MDCFoundation));\nexport { MDCDismissibleDrawerFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCDismissibleDrawerFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}