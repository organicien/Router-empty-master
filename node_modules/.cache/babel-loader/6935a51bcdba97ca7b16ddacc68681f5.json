{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { KEY, normalizeKey } from '@material/dom/keyboard';\nimport { Corner } from '@material/menu-surface/constants';\nimport { cssClasses, numbers, strings } from './constants';\n\nvar MDCSelectFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCSelectFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n\n  /**\n   * @param adapter\n   * @param foundationMap Map from subcomponent names to their subfoundations.\n   */\n\n\n  function MDCSelectFoundation(adapter, foundationMap) {\n    if (foundationMap === void 0) {\n      foundationMap = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation.defaultAdapter), adapter)) || this; // Index of the currently selected menu item.\n\n\n    _this.selectedIndex = numbers.UNSET_INDEX; // VALUE_ATTR values of the menu items.\n\n    _this.menuItemValues = []; // Disabled state\n\n    _this.disabled = false; // isMenuOpen is used to track the state of the menu by listening to the\n    // MDCMenuSurface:closed event For reference, menu.open will return false if\n    // the menu is still closing, but isMenuOpen returns false only after the menu\n    // has closed\n\n    _this.isMenuOpen = false; // By default, select is invalid if it is required but no value is selected.\n\n    _this.useDefaultValidation = true;\n    _this.customValidity = true;\n    _this.leadingIcon = foundationMap.leadingIcon;\n    _this.helperText = foundationMap.helperText;\n    return _this;\n  }\n\n  Object.defineProperty(MDCSelectFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCSelectAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        activateBottomLine: function () {\n          return undefined;\n        },\n        deactivateBottomLine: function () {\n          return undefined;\n        },\n        getSelectedMenuItem: function () {\n          return null;\n        },\n        hasLabel: function () {\n          return false;\n        },\n        floatLabel: function () {\n          return undefined;\n        },\n        getLabelWidth: function () {\n          return 0;\n        },\n        setLabelRequired: function () {\n          return undefined;\n        },\n        hasOutline: function () {\n          return false;\n        },\n        notchOutline: function () {\n          return undefined;\n        },\n        closeOutline: function () {\n          return undefined;\n        },\n        setRippleCenter: function () {\n          return undefined;\n        },\n        notifyChange: function () {\n          return undefined;\n        },\n        setSelectedText: function () {\n          return undefined;\n        },\n        isSelectAnchorFocused: function () {\n          return false;\n        },\n        getSelectAnchorAttr: function () {\n          return '';\n        },\n        setSelectAnchorAttr: function () {\n          return undefined;\n        },\n        removeSelectAnchorAttr: function () {\n          return undefined;\n        },\n        addMenuClass: function () {\n          return undefined;\n        },\n        removeMenuClass: function () {\n          return undefined;\n        },\n        openMenu: function () {\n          return undefined;\n        },\n        closeMenu: function () {\n          return undefined;\n        },\n        getAnchorElement: function () {\n          return null;\n        },\n        setMenuAnchorElement: function () {\n          return undefined;\n        },\n        setMenuAnchorCorner: function () {\n          return undefined;\n        },\n        setMenuWrapFocus: function () {\n          return undefined;\n        },\n        setAttributeAtIndex: function () {\n          return undefined;\n        },\n        focusMenuItemAtIndex: function () {\n          return undefined;\n        },\n        getMenuItemCount: function () {\n          return 0;\n        },\n        getMenuItemValues: function () {\n          return [];\n        },\n        getMenuItemTextAtIndex: function () {\n          return '';\n        },\n        getMenuItemAttr: function () {\n          return '';\n        },\n        addClassAtIndex: function () {\n          return undefined;\n        },\n        removeClassAtIndex: function () {\n          return undefined;\n        },\n        isTypeaheadInProgress: function () {\n          return false;\n        },\n        typeaheadMatchItem: function () {\n          return -1;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** Returns the index of the currently selected menu item, or -1 if none. */\n\n  MDCSelectFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex;\n  };\n\n  MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu) {\n    if (closeMenu === void 0) {\n      closeMenu = false;\n    }\n\n    if (index >= this.adapter.getMenuItemCount()) {\n      return;\n    }\n\n    this.removeSelectionAtIndex(this.selectedIndex);\n    this.setSelectionAtIndex(index);\n\n    if (closeMenu) {\n      this.adapter.closeMenu();\n    }\n\n    this.handleChange();\n  };\n\n  MDCSelectFoundation.prototype.setValue = function (value) {\n    var index = this.menuItemValues.indexOf(value);\n    this.setSelectedIndex(index);\n  };\n\n  MDCSelectFoundation.prototype.getValue = function () {\n    var listItem = this.adapter.getSelectedMenuItem();\n\n    if (listItem) {\n      return this.adapter.getMenuItemAttr(listItem, strings.VALUE_ATTR) || '';\n    }\n\n    return '';\n  };\n\n  MDCSelectFoundation.prototype.getDisabled = function () {\n    return this.disabled;\n  };\n\n  MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {\n    this.disabled = isDisabled;\n\n    if (this.disabled) {\n      this.adapter.addClass(cssClasses.DISABLED);\n      this.adapter.closeMenu();\n    } else {\n      this.adapter.removeClass(cssClasses.DISABLED);\n    }\n\n    if (this.leadingIcon) {\n      this.leadingIcon.setDisabled(this.disabled);\n    }\n\n    if (this.disabled) {\n      // Prevent click events from focusing select. Simply pointer-events: none\n      // is not enough since screenreader clicks may bypass this.\n      this.adapter.removeSelectAnchorAttr('tabindex');\n    } else {\n      this.adapter.setSelectAnchorAttr('tabindex', '0');\n    }\n\n    this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());\n  };\n  /** Opens the menu. */\n\n\n  MDCSelectFoundation.prototype.openMenu = function () {\n    this.adapter.addClass(cssClasses.ACTIVATED);\n    this.adapter.openMenu();\n    this.isMenuOpen = true;\n    this.adapter.setSelectAnchorAttr('aria-expanded', 'true');\n  };\n  /**\n   * @param content Sets the content of the helper text.\n   */\n\n\n  MDCSelectFoundation.prototype.setHelperTextContent = function (content) {\n    if (this.helperText) {\n      this.helperText.setContent(content);\n    }\n  };\n  /**\n   * Re-calculates if the notched outline should be notched and if the label\n   * should float.\n   */\n\n\n  MDCSelectFoundation.prototype.layout = function () {\n    if (this.adapter.hasLabel()) {\n      var optionHasValue = this.getValue().length > 0;\n      var isFocused = this.adapter.hasClass(cssClasses.FOCUSED);\n      var shouldFloatAndNotch = optionHasValue || isFocused;\n      var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n      this.notchOutline(shouldFloatAndNotch);\n      this.adapter.floatLabel(shouldFloatAndNotch);\n      this.adapter.setLabelRequired(isRequired);\n    }\n  };\n  /**\n   * Synchronizes the list of options with the state of the foundation. Call\n   * this whenever menu options are dynamically updated.\n   */\n\n\n  MDCSelectFoundation.prototype.layoutOptions = function () {\n    this.menuItemValues = this.adapter.getMenuItemValues();\n    var selectedIndex = this.menuItemValues.indexOf(this.getValue());\n    this.setSelectionAtIndex(selectedIndex);\n  };\n\n  MDCSelectFoundation.prototype.handleMenuOpened = function () {\n    if (this.menuItemValues.length === 0) {\n      return;\n    } // Menu should open to the last selected element, should open to first menu item otherwise.\n\n\n    var focusItemIndex = this.selectedIndex >= 0 ? this.selectedIndex : 0;\n    this.adapter.focusMenuItemAtIndex(focusItemIndex);\n  };\n\n  MDCSelectFoundation.prototype.handleMenuClosed = function () {\n    this.adapter.removeClass(cssClasses.ACTIVATED);\n    this.isMenuOpen = false;\n    this.adapter.setSelectAnchorAttr('aria-expanded', 'false'); // Unfocus the select if menu is closed without a selection\n\n    if (!this.adapter.isSelectAnchorFocused()) {\n      this.blur();\n    }\n  };\n  /**\n   * Handles value changes, via change event or programmatic updates.\n   */\n\n\n  MDCSelectFoundation.prototype.handleChange = function () {\n    this.layout();\n    this.adapter.notifyChange(this.getValue());\n    var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired && this.useDefaultValidation) {\n      this.setValid(this.isValid());\n\n      if (this.helperText) {\n        this.helperText.setValidity(this.isValid());\n      }\n    }\n  };\n\n  MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {\n    this.setSelectedIndex(index,\n    /** closeMenu */\n    true);\n  };\n  /**\n   * Handles focus events from select element.\n   */\n\n\n  MDCSelectFoundation.prototype.handleFocus = function () {\n    this.adapter.addClass(cssClasses.FOCUSED);\n    this.layout();\n    this.adapter.activateBottomLine();\n  };\n  /**\n   * Handles blur events from select element.\n   */\n\n\n  MDCSelectFoundation.prototype.handleBlur = function () {\n    if (this.isMenuOpen) {\n      return;\n    }\n\n    this.blur();\n  };\n\n  MDCSelectFoundation.prototype.handleClick = function (normalizedX) {\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.isMenuOpen) {\n      this.adapter.closeMenu();\n      return;\n    }\n\n    this.adapter.setRippleCenter(normalizedX);\n    this.openMenu();\n  };\n  /**\n   * Handles keydown events on select element. Depending on the type of\n   * character typed, does typeahead matching or opens menu.\n   */\n\n\n  MDCSelectFoundation.prototype.handleKeydown = function (event) {\n    if (this.isMenuOpen || !this.adapter.hasClass(cssClasses.FOCUSED)) {\n      return;\n    }\n\n    var isEnter = normalizeKey(event) === KEY.ENTER;\n    var isSpace = normalizeKey(event) === KEY.SPACEBAR;\n    var arrowUp = normalizeKey(event) === KEY.ARROW_UP;\n    var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN; // Typeahead\n\n    if (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress()) {\n      var key = isSpace ? ' ' : event.key;\n      var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.selectedIndex);\n\n      if (typeaheadNextIndex >= 0) {\n        this.setSelectedIndex(typeaheadNextIndex);\n      }\n\n      event.preventDefault();\n      return;\n    }\n\n    if (!isEnter && !isSpace && !arrowUp && !arrowDown) {\n      return;\n    } // Increment/decrement index as necessary and open menu.\n\n\n    if (arrowUp && this.selectedIndex > 0) {\n      this.setSelectedIndex(this.selectedIndex - 1);\n    } else if (arrowDown && this.selectedIndex < this.adapter.getMenuItemCount() - 1) {\n      this.setSelectedIndex(this.selectedIndex + 1);\n    }\n\n    this.openMenu();\n    event.preventDefault();\n  };\n  /**\n   * Opens/closes the notched outline.\n   */\n\n\n  MDCSelectFoundation.prototype.notchOutline = function (openNotch) {\n    if (!this.adapter.hasOutline()) {\n      return;\n    }\n\n    var isFocused = this.adapter.hasClass(cssClasses.FOCUSED);\n\n    if (openNotch) {\n      var labelScale = numbers.LABEL_SCALE;\n      var labelWidth = this.adapter.getLabelWidth() * labelScale;\n      this.adapter.notchOutline(labelWidth);\n    } else if (!isFocused) {\n      this.adapter.closeOutline();\n    }\n  };\n  /**\n   * Sets the aria label of the leading icon.\n   */\n\n\n  MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n    if (this.leadingIcon) {\n      this.leadingIcon.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the leading icon.\n   */\n\n\n  MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {\n    if (this.leadingIcon) {\n      this.leadingIcon.setContent(content);\n    }\n  };\n\n  MDCSelectFoundation.prototype.setUseDefaultValidation = function (useDefaultValidation) {\n    this.useDefaultValidation = useDefaultValidation;\n  };\n\n  MDCSelectFoundation.prototype.setValid = function (isValid) {\n    if (!this.useDefaultValidation) {\n      this.customValidity = isValid;\n    }\n\n    this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());\n\n    if (isValid) {\n      this.adapter.removeClass(cssClasses.INVALID);\n      this.adapter.removeMenuClass(cssClasses.MENU_INVALID);\n    } else {\n      this.adapter.addClass(cssClasses.INVALID);\n      this.adapter.addMenuClass(cssClasses.MENU_INVALID);\n    }\n  };\n\n  MDCSelectFoundation.prototype.isValid = function () {\n    if (this.useDefaultValidation && this.adapter.hasClass(cssClasses.REQUIRED) && !this.adapter.hasClass(cssClasses.DISABLED)) {\n      // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n      // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n      return this.selectedIndex !== numbers.UNSET_INDEX && (this.selectedIndex !== 0 || Boolean(this.getValue()));\n    }\n\n    return this.customValidity;\n  };\n\n  MDCSelectFoundation.prototype.setRequired = function (isRequired) {\n    if (isRequired) {\n      this.adapter.addClass(cssClasses.REQUIRED);\n    } else {\n      this.adapter.removeClass(cssClasses.REQUIRED);\n    }\n\n    this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());\n    this.adapter.setLabelRequired(isRequired);\n  };\n\n  MDCSelectFoundation.prototype.getRequired = function () {\n    return this.adapter.getSelectAnchorAttr('aria-required') === 'true';\n  };\n\n  MDCSelectFoundation.prototype.init = function () {\n    var anchorEl = this.adapter.getAnchorElement();\n\n    if (anchorEl) {\n      this.adapter.setMenuAnchorElement(anchorEl);\n      this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);\n    }\n\n    this.adapter.setMenuWrapFocus(false);\n    this.setDisabled(this.adapter.hasClass(cssClasses.DISABLED));\n    this.layoutOptions();\n    this.layout();\n  };\n  /**\n   * Unfocuses the select component.\n   */\n\n\n  MDCSelectFoundation.prototype.blur = function () {\n    this.adapter.removeClass(cssClasses.FOCUSED);\n    this.layout();\n    this.adapter.deactivateBottomLine();\n    var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired && this.useDefaultValidation) {\n      this.setValid(this.isValid());\n\n      if (this.helperText) {\n        this.helperText.setValidity(this.isValid());\n      }\n    }\n  };\n\n  MDCSelectFoundation.prototype.setSelectionAtIndex = function (index) {\n    this.selectedIndex = index;\n\n    if (index === numbers.UNSET_INDEX) {\n      this.adapter.setSelectedText('');\n      return;\n    }\n\n    this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());\n    this.adapter.addClassAtIndex(index, cssClasses.SELECTED_ITEM_CLASS);\n    this.adapter.setAttributeAtIndex(index, strings.ARIA_SELECTED_ATTR, 'true');\n  };\n\n  MDCSelectFoundation.prototype.removeSelectionAtIndex = function (index) {\n    if (index !== numbers.UNSET_INDEX) {\n      this.adapter.removeClassAtIndex(index, cssClasses.SELECTED_ITEM_CLASS);\n      this.adapter.setAttributeAtIndex(index, strings.ARIA_SELECTED_ATTR, 'false');\n    }\n  };\n\n  return MDCSelectFoundation;\n}(MDCFoundation);\n\nexport { MDCSelectFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCSelectFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { KEY, normalizeKey } from '@material/dom/keyboard';\nimport { Corner } from '@material/menu-surface/constants';\nimport { cssClasses, numbers, strings } from './constants';\nvar MDCSelectFoundation = /** @class */ (function (_super) {\n    __extends(MDCSelectFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    /**\n     * @param adapter\n     * @param foundationMap Map from subcomponent names to their subfoundations.\n     */\n    function MDCSelectFoundation(adapter, foundationMap) {\n        if (foundationMap === void 0) { foundationMap = {}; }\n        var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation.defaultAdapter), adapter)) || this;\n        // Index of the currently selected menu item.\n        _this.selectedIndex = numbers.UNSET_INDEX;\n        // VALUE_ATTR values of the menu items.\n        _this.menuItemValues = [];\n        // Disabled state\n        _this.disabled = false;\n        // isMenuOpen is used to track the state of the menu by listening to the\n        // MDCMenuSurface:closed event For reference, menu.open will return false if\n        // the menu is still closing, but isMenuOpen returns false only after the menu\n        // has closed\n        _this.isMenuOpen = false;\n        // By default, select is invalid if it is required but no value is selected.\n        _this.useDefaultValidation = true;\n        _this.customValidity = true;\n        _this.leadingIcon = foundationMap.leadingIcon;\n        _this.helperText = foundationMap.helperText;\n        return _this;\n    }\n    Object.defineProperty(MDCSelectFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectFoundation, \"defaultAdapter\", {\n        /**\n         * See {@link MDCSelectAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                activateBottomLine: function () { return undefined; },\n                deactivateBottomLine: function () { return undefined; },\n                getSelectedMenuItem: function () { return null; },\n                hasLabel: function () { return false; },\n                floatLabel: function () { return undefined; },\n                getLabelWidth: function () { return 0; },\n                setLabelRequired: function () { return undefined; },\n                hasOutline: function () { return false; },\n                notchOutline: function () { return undefined; },\n                closeOutline: function () { return undefined; },\n                setRippleCenter: function () { return undefined; },\n                notifyChange: function () { return undefined; },\n                setSelectedText: function () { return undefined; },\n                isSelectAnchorFocused: function () { return false; },\n                getSelectAnchorAttr: function () { return ''; },\n                setSelectAnchorAttr: function () { return undefined; },\n                removeSelectAnchorAttr: function () { return undefined; },\n                addMenuClass: function () { return undefined; },\n                removeMenuClass: function () { return undefined; },\n                openMenu: function () { return undefined; },\n                closeMenu: function () { return undefined; },\n                getAnchorElement: function () { return null; },\n                setMenuAnchorElement: function () { return undefined; },\n                setMenuAnchorCorner: function () { return undefined; },\n                setMenuWrapFocus: function () { return undefined; },\n                setAttributeAtIndex: function () { return undefined; },\n                focusMenuItemAtIndex: function () { return undefined; },\n                getMenuItemCount: function () { return 0; },\n                getMenuItemValues: function () { return []; },\n                getMenuItemTextAtIndex: function () { return ''; },\n                getMenuItemAttr: function () { return ''; },\n                addClassAtIndex: function () { return undefined; },\n                removeClassAtIndex: function () { return undefined; },\n                isTypeaheadInProgress: function () { return false; },\n                typeaheadMatchItem: function () { return -1; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Returns the index of the currently selected menu item, or -1 if none. */\n    MDCSelectFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu) {\n        if (closeMenu === void 0) { closeMenu = false; }\n        if (index >= this.adapter.getMenuItemCount()) {\n            return;\n        }\n        this.removeSelectionAtIndex(this.selectedIndex);\n        this.setSelectionAtIndex(index);\n        if (closeMenu) {\n            this.adapter.closeMenu();\n        }\n        this.handleChange();\n    };\n    MDCSelectFoundation.prototype.setValue = function (value) {\n        var index = this.menuItemValues.indexOf(value);\n        this.setSelectedIndex(index);\n    };\n    MDCSelectFoundation.prototype.getValue = function () {\n        var listItem = this.adapter.getSelectedMenuItem();\n        if (listItem) {\n            return this.adapter.getMenuItemAttr(listItem, strings.VALUE_ATTR) || '';\n        }\n        return '';\n    };\n    MDCSelectFoundation.prototype.getDisabled = function () {\n        return this.disabled;\n    };\n    MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {\n        this.disabled = isDisabled;\n        if (this.disabled) {\n            this.adapter.addClass(cssClasses.DISABLED);\n            this.adapter.closeMenu();\n        }\n        else {\n            this.adapter.removeClass(cssClasses.DISABLED);\n        }\n        if (this.leadingIcon) {\n            this.leadingIcon.setDisabled(this.disabled);\n        }\n        if (this.disabled) {\n            // Prevent click events from focusing select. Simply pointer-events: none\n            // is not enough since screenreader clicks may bypass this.\n            this.adapter.removeSelectAnchorAttr('tabindex');\n        }\n        else {\n            this.adapter.setSelectAnchorAttr('tabindex', '0');\n        }\n        this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());\n    };\n    /** Opens the menu. */\n    MDCSelectFoundation.prototype.openMenu = function () {\n        this.adapter.addClass(cssClasses.ACTIVATED);\n        this.adapter.openMenu();\n        this.isMenuOpen = true;\n        this.adapter.setSelectAnchorAttr('aria-expanded', 'true');\n    };\n    /**\n     * @param content Sets the content of the helper text.\n     */\n    MDCSelectFoundation.prototype.setHelperTextContent = function (content) {\n        if (this.helperText) {\n            this.helperText.setContent(content);\n        }\n    };\n    /**\n     * Re-calculates if the notched outline should be notched and if the label\n     * should float.\n     */\n    MDCSelectFoundation.prototype.layout = function () {\n        if (this.adapter.hasLabel()) {\n            var optionHasValue = this.getValue().length > 0;\n            var isFocused = this.adapter.hasClass(cssClasses.FOCUSED);\n            var shouldFloatAndNotch = optionHasValue || isFocused;\n            var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n            this.notchOutline(shouldFloatAndNotch);\n            this.adapter.floatLabel(shouldFloatAndNotch);\n            this.adapter.setLabelRequired(isRequired);\n        }\n    };\n    /**\n     * Synchronizes the list of options with the state of the foundation. Call\n     * this whenever menu options are dynamically updated.\n     */\n    MDCSelectFoundation.prototype.layoutOptions = function () {\n        this.menuItemValues = this.adapter.getMenuItemValues();\n        var selectedIndex = this.menuItemValues.indexOf(this.getValue());\n        this.setSelectionAtIndex(selectedIndex);\n    };\n    MDCSelectFoundation.prototype.handleMenuOpened = function () {\n        if (this.menuItemValues.length === 0) {\n            return;\n        }\n        // Menu should open to the last selected element, should open to first menu item otherwise.\n        var focusItemIndex = this.selectedIndex >= 0 ? this.selectedIndex : 0;\n        this.adapter.focusMenuItemAtIndex(focusItemIndex);\n    };\n    MDCSelectFoundation.prototype.handleMenuClosed = function () {\n        this.adapter.removeClass(cssClasses.ACTIVATED);\n        this.isMenuOpen = false;\n        this.adapter.setSelectAnchorAttr('aria-expanded', 'false');\n        // Unfocus the select if menu is closed without a selection\n        if (!this.adapter.isSelectAnchorFocused()) {\n            this.blur();\n        }\n    };\n    /**\n     * Handles value changes, via change event or programmatic updates.\n     */\n    MDCSelectFoundation.prototype.handleChange = function () {\n        this.layout();\n        this.adapter.notifyChange(this.getValue());\n        var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n        if (isRequired && this.useDefaultValidation) {\n            this.setValid(this.isValid());\n            if (this.helperText) {\n                this.helperText.setValidity(this.isValid());\n            }\n        }\n    };\n    MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {\n        this.setSelectedIndex(index, /** closeMenu */ true);\n    };\n    /**\n     * Handles focus events from select element.\n     */\n    MDCSelectFoundation.prototype.handleFocus = function () {\n        this.adapter.addClass(cssClasses.FOCUSED);\n        this.layout();\n        this.adapter.activateBottomLine();\n    };\n    /**\n     * Handles blur events from select element.\n     */\n    MDCSelectFoundation.prototype.handleBlur = function () {\n        if (this.isMenuOpen) {\n            return;\n        }\n        this.blur();\n    };\n    MDCSelectFoundation.prototype.handleClick = function (normalizedX) {\n        if (this.disabled) {\n            return;\n        }\n        if (this.isMenuOpen) {\n            this.adapter.closeMenu();\n            return;\n        }\n        this.adapter.setRippleCenter(normalizedX);\n        this.openMenu();\n    };\n    /**\n     * Handles keydown events on select element. Depending on the type of\n     * character typed, does typeahead matching or opens menu.\n     */\n    MDCSelectFoundation.prototype.handleKeydown = function (event) {\n        if (this.isMenuOpen || !this.adapter.hasClass(cssClasses.FOCUSED)) {\n            return;\n        }\n        var isEnter = normalizeKey(event) === KEY.ENTER;\n        var isSpace = normalizeKey(event) === KEY.SPACEBAR;\n        var arrowUp = normalizeKey(event) === KEY.ARROW_UP;\n        var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;\n        // Typeahead\n        if (!isSpace && event.key && event.key.length === 1 ||\n            isSpace && this.adapter.isTypeaheadInProgress()) {\n            var key = isSpace ? ' ' : event.key;\n            var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.selectedIndex);\n            if (typeaheadNextIndex >= 0) {\n                this.setSelectedIndex(typeaheadNextIndex);\n            }\n            event.preventDefault();\n            return;\n        }\n        if (!isEnter && !isSpace && !arrowUp && !arrowDown) {\n            return;\n        }\n        // Increment/decrement index as necessary and open menu.\n        if (arrowUp && this.selectedIndex > 0) {\n            this.setSelectedIndex(this.selectedIndex - 1);\n        }\n        else if (arrowDown && this.selectedIndex < this.adapter.getMenuItemCount() - 1) {\n            this.setSelectedIndex(this.selectedIndex + 1);\n        }\n        this.openMenu();\n        event.preventDefault();\n    };\n    /**\n     * Opens/closes the notched outline.\n     */\n    MDCSelectFoundation.prototype.notchOutline = function (openNotch) {\n        if (!this.adapter.hasOutline()) {\n            return;\n        }\n        var isFocused = this.adapter.hasClass(cssClasses.FOCUSED);\n        if (openNotch) {\n            var labelScale = numbers.LABEL_SCALE;\n            var labelWidth = this.adapter.getLabelWidth() * labelScale;\n            this.adapter.notchOutline(labelWidth);\n        }\n        else if (!isFocused) {\n            this.adapter.closeOutline();\n        }\n    };\n    /**\n     * Sets the aria label of the leading icon.\n     */\n    MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n        if (this.leadingIcon) {\n            this.leadingIcon.setAriaLabel(label);\n        }\n    };\n    /**\n     * Sets the text content of the leading icon.\n     */\n    MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {\n        if (this.leadingIcon) {\n            this.leadingIcon.setContent(content);\n        }\n    };\n    MDCSelectFoundation.prototype.setUseDefaultValidation = function (useDefaultValidation) {\n        this.useDefaultValidation = useDefaultValidation;\n    };\n    MDCSelectFoundation.prototype.setValid = function (isValid) {\n        if (!this.useDefaultValidation) {\n            this.customValidity = isValid;\n        }\n        this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());\n        if (isValid) {\n            this.adapter.removeClass(cssClasses.INVALID);\n            this.adapter.removeMenuClass(cssClasses.MENU_INVALID);\n        }\n        else {\n            this.adapter.addClass(cssClasses.INVALID);\n            this.adapter.addMenuClass(cssClasses.MENU_INVALID);\n        }\n    };\n    MDCSelectFoundation.prototype.isValid = function () {\n        if (this.useDefaultValidation &&\n            this.adapter.hasClass(cssClasses.REQUIRED) &&\n            !this.adapter.hasClass(cssClasses.DISABLED)) {\n            // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n            // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n            return this.selectedIndex !== numbers.UNSET_INDEX &&\n                (this.selectedIndex !== 0 || Boolean(this.getValue()));\n        }\n        return this.customValidity;\n    };\n    MDCSelectFoundation.prototype.setRequired = function (isRequired) {\n        if (isRequired) {\n            this.adapter.addClass(cssClasses.REQUIRED);\n        }\n        else {\n            this.adapter.removeClass(cssClasses.REQUIRED);\n        }\n        this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());\n        this.adapter.setLabelRequired(isRequired);\n    };\n    MDCSelectFoundation.prototype.getRequired = function () {\n        return this.adapter.getSelectAnchorAttr('aria-required') === 'true';\n    };\n    MDCSelectFoundation.prototype.init = function () {\n        var anchorEl = this.adapter.getAnchorElement();\n        if (anchorEl) {\n            this.adapter.setMenuAnchorElement(anchorEl);\n            this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);\n        }\n        this.adapter.setMenuWrapFocus(false);\n        this.setDisabled(this.adapter.hasClass(cssClasses.DISABLED));\n        this.layoutOptions();\n        this.layout();\n    };\n    /**\n     * Unfocuses the select component.\n     */\n    MDCSelectFoundation.prototype.blur = function () {\n        this.adapter.removeClass(cssClasses.FOCUSED);\n        this.layout();\n        this.adapter.deactivateBottomLine();\n        var isRequired = this.adapter.hasClass(cssClasses.REQUIRED);\n        if (isRequired && this.useDefaultValidation) {\n            this.setValid(this.isValid());\n            if (this.helperText) {\n                this.helperText.setValidity(this.isValid());\n            }\n        }\n    };\n    MDCSelectFoundation.prototype.setSelectionAtIndex = function (index) {\n        this.selectedIndex = index;\n        if (index === numbers.UNSET_INDEX) {\n            this.adapter.setSelectedText('');\n            return;\n        }\n        this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());\n        this.adapter.addClassAtIndex(index, cssClasses.SELECTED_ITEM_CLASS);\n        this.adapter.setAttributeAtIndex(index, strings.ARIA_SELECTED_ATTR, 'true');\n    };\n    MDCSelectFoundation.prototype.removeSelectionAtIndex = function (index) {\n        if (index !== numbers.UNSET_INDEX) {\n            this.adapter.removeClassAtIndex(index, cssClasses.SELECTED_ITEM_CLASS);\n            this.adapter.setAttributeAtIndex(index, strings.ARIA_SELECTED_ATTR, 'false');\n        }\n    };\n    return MDCSelectFoundation;\n}(MDCFoundation));\nexport { MDCSelectFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSelectFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}