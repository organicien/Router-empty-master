{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCheckbox } from '@material/checkbox/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { cssClasses, dataAttributes, events, messages, selectors, SortValue } from './constants';\nimport { MDCDataTableFoundation } from './foundation';\n/**\n * Implementation of `MDCDataTableFoundation`\n */\n\nvar MDCDataTable =\n/** @class */\nfunction (_super) {\n  __extends(MDCDataTable, _super);\n\n  function MDCDataTable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCDataTable.attachTo = function (root) {\n    return new MDCDataTable(root);\n  };\n\n  MDCDataTable.prototype.initialize = function (checkboxFactory) {\n    if (checkboxFactory === void 0) {\n      checkboxFactory = function (el) {\n        return new MDCCheckbox(el);\n      };\n    }\n\n    this.checkboxFactory = checkboxFactory;\n  };\n\n  MDCDataTable.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.headerRow = this.root.querySelector(\".\" + cssClasses.HEADER_ROW);\n\n    this.handleHeaderRowCheckboxChange = function () {\n      return _this.foundation.handleHeaderRowCheckboxChange();\n    };\n\n    this.headerRow.addEventListener('change', this.handleHeaderRowCheckboxChange);\n\n    this.headerRowClickListener = function (event) {\n      _this.handleHeaderRowClick(event);\n    };\n\n    this.headerRow.addEventListener('click', this.headerRowClickListener);\n    this.content = this.root.querySelector(\".\" + cssClasses.CONTENT);\n\n    this.handleRowCheckboxChange = function (event) {\n      return _this.foundation.handleRowCheckboxChange(event);\n    };\n\n    this.content.addEventListener('change', this.handleRowCheckboxChange);\n    this.layout();\n  };\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   */\n\n\n  MDCDataTable.prototype.layout = function () {\n    this.foundation.layout();\n  };\n  /**\n   * @return Returns array of header row cell elements.\n   */\n\n\n  MDCDataTable.prototype.getHeaderCells = function () {\n    return [].slice.call(this.root.querySelectorAll(selectors.HEADER_CELL));\n  };\n  /**\n   * @return Returns array of row elements.\n   */\n\n\n  MDCDataTable.prototype.getRows = function () {\n    return this.foundation.getRows();\n  };\n  /**\n   * @return Returns array of selected row ids.\n   */\n\n\n  MDCDataTable.prototype.getSelectedRowIds = function () {\n    return this.foundation.getSelectedRowIds();\n  };\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n\n\n  MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {\n    this.foundation.setSelectedRowIds(rowIds);\n  };\n\n  MDCDataTable.prototype.destroy = function () {\n    this.headerRow.removeEventListener('change', this.handleHeaderRowCheckboxChange);\n    this.headerRow.removeEventListener('click', this.headerRowClickListener);\n    this.content.removeEventListener('change', this.handleRowCheckboxChange);\n    this.headerRowCheckbox.destroy();\n    this.rowCheckboxList.forEach(function (checkbox) {\n      checkbox.destroy();\n    });\n  };\n\n  MDCDataTable.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClass: function (className) {\n        _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        _this.root.classList.remove(className);\n      },\n      getHeaderCellElements: function () {\n        return _this.getHeaderCells();\n      },\n      getHeaderCellCount: function () {\n        return _this.getHeaderCells().length;\n      },\n      getAttributeByHeaderCellIndex: function (index, attribute) {\n        return _this.getHeaderCells()[index].getAttribute(attribute);\n      },\n      setAttributeByHeaderCellIndex: function (index, attribute, value) {\n        _this.getHeaderCells()[index].setAttribute(attribute, value);\n      },\n      setClassNameByHeaderCellIndex: function (index, className) {\n        _this.getHeaderCells()[index].classList.add(className);\n      },\n      removeClassNameByHeaderCellIndex: function (index, className) {\n        _this.getHeaderCells()[index].classList.remove(className);\n      },\n      notifySortAction: function (data) {\n        _this.emit(events.SORTED, data,\n        /** shouldBubble */\n        true);\n      },\n      getTableBodyHeight: function () {\n        var tableBody = _this.root.querySelector(selectors.CONTENT);\n\n        if (!tableBody) {\n          throw new Error('MDCDataTable: Table body element not found.');\n        }\n\n        return tableBody.getBoundingClientRect().height + \"px\";\n      },\n      getTableHeaderHeight: function () {\n        var tableHeader = _this.root.querySelector(selectors.HEADER_ROW);\n\n        if (!tableHeader) {\n          throw new Error('MDCDataTable: Table header element not found.');\n        }\n\n        return tableHeader.getBoundingClientRect().height + \"px\";\n      },\n      setProgressIndicatorStyles: function (styles) {\n        var progressIndicator = _this.root.querySelector(selectors.PROGRESS_INDICATOR);\n\n        if (!progressIndicator) {\n          throw new Error('MDCDataTable: Progress indicator element not found.');\n        }\n\n        Object.assign(progressIndicator.style, styles);\n      },\n      addClassAtRowIndex: function (rowIndex, className) {\n        _this.getRows()[rowIndex].classList.add(className);\n      },\n      getRowCount: function () {\n        return _this.getRows().length;\n      },\n      getRowElements: function () {\n        return [].slice.call(_this.root.querySelectorAll(selectors.ROW));\n      },\n      getRowIdAtIndex: function (rowIndex) {\n        return _this.getRows()[rowIndex].getAttribute(dataAttributes.ROW_ID);\n      },\n      getRowIndexByChildElement: function (el) {\n        return _this.getRows().indexOf(closest(el, selectors.ROW));\n      },\n      getSelectedRowCount: function () {\n        return _this.root.querySelectorAll(selectors.ROW_SELECTED).length;\n      },\n      isCheckboxAtRowIndexChecked: function (rowIndex) {\n        return _this.rowCheckboxList[rowIndex].checked;\n      },\n      isHeaderRowCheckboxChecked: function () {\n        return _this.headerRowCheckbox.checked;\n      },\n      isRowsSelectable: function () {\n        return !!_this.root.querySelector(selectors.ROW_CHECKBOX);\n      },\n      notifyRowSelectionChanged: function (data) {\n        _this.emit(events.ROW_SELECTION_CHANGED, {\n          row: _this.getRowByIndex(data.rowIndex),\n          rowId: _this.getRowIdByIndex(data.rowIndex),\n          rowIndex: data.rowIndex,\n          selected: data.selected\n        },\n        /** shouldBubble */\n        true);\n      },\n      notifySelectedAll: function () {\n        _this.emit(events.SELECTED_ALL, {},\n        /** shouldBubble */\n        true);\n      },\n      notifyUnselectedAll: function () {\n        _this.emit(events.UNSELECTED_ALL, {},\n        /** shouldBubble */\n        true);\n      },\n      registerHeaderRowCheckbox: function () {\n        if (_this.headerRowCheckbox) {\n          _this.headerRowCheckbox.destroy();\n        }\n\n        var checkboxEl = _this.root.querySelector(selectors.HEADER_ROW_CHECKBOX);\n\n        _this.headerRowCheckbox = _this.checkboxFactory(checkboxEl);\n      },\n      registerRowCheckboxes: function () {\n        if (_this.rowCheckboxList) {\n          _this.rowCheckboxList.forEach(function (checkbox) {\n            checkbox.destroy();\n          });\n        }\n\n        _this.rowCheckboxList = [];\n\n        _this.getRows().forEach(function (rowEl) {\n          var checkbox = _this.checkboxFactory(rowEl.querySelector(selectors.ROW_CHECKBOX));\n\n          _this.rowCheckboxList.push(checkbox);\n        });\n      },\n      removeClassAtRowIndex: function (rowIndex, className) {\n        _this.getRows()[rowIndex].classList.remove(className);\n      },\n      setAttributeAtRowIndex: function (rowIndex, attr, value) {\n        _this.getRows()[rowIndex].setAttribute(attr, value);\n      },\n      setHeaderRowCheckboxChecked: function (checked) {\n        _this.headerRowCheckbox.checked = checked;\n      },\n      setHeaderRowCheckboxIndeterminate: function (indeterminate) {\n        _this.headerRowCheckbox.indeterminate = indeterminate;\n      },\n      setRowCheckboxCheckedAtIndex: function (rowIndex, checked) {\n        _this.rowCheckboxList[rowIndex].checked = checked;\n      },\n      setSortStatusLabelByHeaderCellIndex: function (columnIndex, sortValue) {\n        var headerCell = _this.getHeaderCells()[columnIndex];\n\n        var sortStatusLabel = headerCell.querySelector(selectors.SORT_STATUS_LABEL);\n        if (!sortStatusLabel) return;\n        sortStatusLabel.textContent = _this.getSortStatusMessageBySortValue(sortValue);\n      }\n    };\n    return new MDCDataTableFoundation(adapter);\n  };\n\n  MDCDataTable.prototype.getRowByIndex = function (index) {\n    return this.getRows()[index];\n  };\n\n  MDCDataTable.prototype.getRowIdByIndex = function (index) {\n    return this.getRowByIndex(index).getAttribute(dataAttributes.ROW_ID);\n  };\n\n  MDCDataTable.prototype.handleHeaderRowClick = function (event) {\n    var headerCell = closest(event.target, selectors.HEADER_CELL_WITH_SORT);\n\n    if (!headerCell) {\n      return;\n    }\n\n    var columnId = headerCell.getAttribute(dataAttributes.COLUMN_ID);\n    var columnIndex = this.getHeaderCells().indexOf(headerCell);\n\n    if (columnIndex === -1) {\n      return;\n    }\n\n    this.foundation.handleSortAction({\n      columnId: columnId,\n      columnIndex: columnIndex,\n      headerCell: headerCell\n    });\n  };\n\n  MDCDataTable.prototype.getSortStatusMessageBySortValue = function (sortValue) {\n    switch (sortValue) {\n      case SortValue.ASCENDING:\n        return messages.SORTED_IN_ASCENDING;\n\n      case SortValue.DESCENDING:\n        return messages.SORTED_IN_DESCENDING;\n\n      default:\n        return '';\n    }\n  };\n\n  return MDCDataTable;\n}(MDCComponent);\n\nexport { MDCDataTable };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCheckbox } from '@material/checkbox/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { cssClasses, dataAttributes, events, messages, selectors, SortValue } from './constants';\nimport { MDCDataTableFoundation } from './foundation';\n/**\n * Implementation of `MDCDataTableFoundation`\n */\nvar MDCDataTable = /** @class */ (function (_super) {\n    __extends(MDCDataTable, _super);\n    function MDCDataTable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCDataTable.attachTo = function (root) {\n        return new MDCDataTable(root);\n    };\n    MDCDataTable.prototype.initialize = function (checkboxFactory) {\n        if (checkboxFactory === void 0) { checkboxFactory = function (el) { return new MDCCheckbox(el); }; }\n        this.checkboxFactory = checkboxFactory;\n    };\n    MDCDataTable.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.headerRow =\n            this.root.querySelector(\".\" + cssClasses.HEADER_ROW);\n        this.handleHeaderRowCheckboxChange = function () {\n            return _this.foundation.handleHeaderRowCheckboxChange();\n        };\n        this.headerRow.addEventListener('change', this.handleHeaderRowCheckboxChange);\n        this.headerRowClickListener = function (event) {\n            _this.handleHeaderRowClick(event);\n        };\n        this.headerRow.addEventListener('click', this.headerRowClickListener);\n        this.content =\n            this.root.querySelector(\".\" + cssClasses.CONTENT);\n        this.handleRowCheckboxChange = function (event) {\n            return _this.foundation.handleRowCheckboxChange(event);\n        };\n        this.content.addEventListener('change', this.handleRowCheckboxChange);\n        this.layout();\n    };\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     */\n    MDCDataTable.prototype.layout = function () {\n        this.foundation.layout();\n    };\n    /**\n     * @return Returns array of header row cell elements.\n     */\n    MDCDataTable.prototype.getHeaderCells = function () {\n        return [].slice.call(this.root.querySelectorAll(selectors.HEADER_CELL));\n    };\n    /**\n     * @return Returns array of row elements.\n     */\n    MDCDataTable.prototype.getRows = function () {\n        return this.foundation.getRows();\n    };\n    /**\n     * @return Returns array of selected row ids.\n     */\n    MDCDataTable.prototype.getSelectedRowIds = function () {\n        return this.foundation.getSelectedRowIds();\n    };\n    /**\n     * Sets selected row ids. Overwrites previously selected rows.\n     * @param rowIds Array of row ids that needs to be selected.\n     */\n    MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {\n        this.foundation.setSelectedRowIds(rowIds);\n    };\n    MDCDataTable.prototype.destroy = function () {\n        this.headerRow.removeEventListener('change', this.handleHeaderRowCheckboxChange);\n        this.headerRow.removeEventListener('click', this.headerRowClickListener);\n        this.content.removeEventListener('change', this.handleRowCheckboxChange);\n        this.headerRowCheckbox.destroy();\n        this.rowCheckboxList.forEach(function (checkbox) {\n            checkbox.destroy();\n        });\n    };\n    MDCDataTable.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            getHeaderCellElements: function () { return _this.getHeaderCells(); },\n            getHeaderCellCount: function () { return _this.getHeaderCells().length; },\n            getAttributeByHeaderCellIndex: function (index, attribute) {\n                return _this.getHeaderCells()[index].getAttribute(attribute);\n            },\n            setAttributeByHeaderCellIndex: function (index, attribute, value) {\n                _this.getHeaderCells()[index].setAttribute(attribute, value);\n            },\n            setClassNameByHeaderCellIndex: function (index, className) {\n                _this.getHeaderCells()[index].classList.add(className);\n            },\n            removeClassNameByHeaderCellIndex: function (index, className) {\n                _this.getHeaderCells()[index].classList.remove(className);\n            },\n            notifySortAction: function (data) {\n                _this.emit(events.SORTED, data, /** shouldBubble */ true);\n            },\n            getTableBodyHeight: function () {\n                var tableBody = _this.root.querySelector(selectors.CONTENT);\n                if (!tableBody) {\n                    throw new Error('MDCDataTable: Table body element not found.');\n                }\n                return tableBody.getBoundingClientRect().height + \"px\";\n            },\n            getTableHeaderHeight: function () {\n                var tableHeader = _this.root.querySelector(selectors.HEADER_ROW);\n                if (!tableHeader) {\n                    throw new Error('MDCDataTable: Table header element not found.');\n                }\n                return tableHeader.getBoundingClientRect().height + \"px\";\n            },\n            setProgressIndicatorStyles: function (styles) {\n                var progressIndicator = _this.root.querySelector(selectors.PROGRESS_INDICATOR);\n                if (!progressIndicator) {\n                    throw new Error('MDCDataTable: Progress indicator element not found.');\n                }\n                Object.assign(progressIndicator.style, styles);\n            },\n            addClassAtRowIndex: function (rowIndex, className) {\n                _this.getRows()[rowIndex].classList.add(className);\n            },\n            getRowCount: function () { return _this.getRows().length; },\n            getRowElements: function () { return [].slice.call(_this.root.querySelectorAll(selectors.ROW)); },\n            getRowIdAtIndex: function (rowIndex) {\n                return _this.getRows()[rowIndex].getAttribute(dataAttributes.ROW_ID);\n            },\n            getRowIndexByChildElement: function (el) {\n                return _this.getRows().indexOf(closest(el, selectors.ROW));\n            },\n            getSelectedRowCount: function () {\n                return _this.root.querySelectorAll(selectors.ROW_SELECTED).length;\n            },\n            isCheckboxAtRowIndexChecked: function (rowIndex) {\n                return _this.rowCheckboxList[rowIndex].checked;\n            },\n            isHeaderRowCheckboxChecked: function () { return _this.headerRowCheckbox.checked; },\n            isRowsSelectable: function () { return !!_this.root.querySelector(selectors.ROW_CHECKBOX); },\n            notifyRowSelectionChanged: function (data) {\n                _this.emit(events.ROW_SELECTION_CHANGED, {\n                    row: _this.getRowByIndex(data.rowIndex),\n                    rowId: _this.getRowIdByIndex(data.rowIndex),\n                    rowIndex: data.rowIndex,\n                    selected: data.selected,\n                }, \n                /** shouldBubble */ true);\n            },\n            notifySelectedAll: function () {\n                _this.emit(events.SELECTED_ALL, {}, /** shouldBubble */ true);\n            },\n            notifyUnselectedAll: function () {\n                _this.emit(events.UNSELECTED_ALL, {}, /** shouldBubble */ true);\n            },\n            registerHeaderRowCheckbox: function () {\n                if (_this.headerRowCheckbox) {\n                    _this.headerRowCheckbox.destroy();\n                }\n                var checkboxEl = _this.root.querySelector(selectors.HEADER_ROW_CHECKBOX);\n                _this.headerRowCheckbox = _this.checkboxFactory(checkboxEl);\n            },\n            registerRowCheckboxes: function () {\n                if (_this.rowCheckboxList) {\n                    _this.rowCheckboxList.forEach(function (checkbox) {\n                        checkbox.destroy();\n                    });\n                }\n                _this.rowCheckboxList = [];\n                _this.getRows().forEach(function (rowEl) {\n                    var checkbox = _this.checkboxFactory(rowEl.querySelector(selectors.ROW_CHECKBOX));\n                    _this.rowCheckboxList.push(checkbox);\n                });\n            },\n            removeClassAtRowIndex: function (rowIndex, className) {\n                _this.getRows()[rowIndex].classList.remove(className);\n            },\n            setAttributeAtRowIndex: function (rowIndex, attr, value) {\n                _this.getRows()[rowIndex].setAttribute(attr, value);\n            },\n            setHeaderRowCheckboxChecked: function (checked) {\n                _this.headerRowCheckbox.checked = checked;\n            },\n            setHeaderRowCheckboxIndeterminate: function (indeterminate) {\n                _this.headerRowCheckbox.indeterminate = indeterminate;\n            },\n            setRowCheckboxCheckedAtIndex: function (rowIndex, checked) {\n                _this.rowCheckboxList[rowIndex].checked = checked;\n            },\n            setSortStatusLabelByHeaderCellIndex: function (columnIndex, sortValue) {\n                var headerCell = _this.getHeaderCells()[columnIndex];\n                var sortStatusLabel = headerCell.querySelector(selectors.SORT_STATUS_LABEL);\n                if (!sortStatusLabel)\n                    return;\n                sortStatusLabel.textContent =\n                    _this.getSortStatusMessageBySortValue(sortValue);\n            },\n        };\n        return new MDCDataTableFoundation(adapter);\n    };\n    MDCDataTable.prototype.getRowByIndex = function (index) {\n        return this.getRows()[index];\n    };\n    MDCDataTable.prototype.getRowIdByIndex = function (index) {\n        return this.getRowByIndex(index).getAttribute(dataAttributes.ROW_ID);\n    };\n    MDCDataTable.prototype.handleHeaderRowClick = function (event) {\n        var headerCell = closest(event.target, selectors.HEADER_CELL_WITH_SORT);\n        if (!headerCell) {\n            return;\n        }\n        var columnId = headerCell.getAttribute(dataAttributes.COLUMN_ID);\n        var columnIndex = this.getHeaderCells().indexOf(headerCell);\n        if (columnIndex === -1) {\n            return;\n        }\n        this.foundation.handleSortAction({ columnId: columnId, columnIndex: columnIndex, headerCell: headerCell });\n    };\n    MDCDataTable.prototype.getSortStatusMessageBySortValue = function (sortValue) {\n        switch (sortValue) {\n            case SortValue.ASCENDING:\n                return messages.SORTED_IN_ASCENDING;\n            case SortValue.DESCENDING:\n                return messages.SORTED_IN_DESCENDING;\n            default:\n                return '';\n        }\n    };\n    return MDCDataTable;\n}(MDCComponent));\nexport { MDCDataTable };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}