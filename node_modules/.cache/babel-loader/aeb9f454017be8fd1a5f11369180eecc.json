{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { MDCList } from '@material/list/component';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCMenuSurface } from '@material/menu-surface/component';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCMenuFoundation } from './foundation';\n\nvar MDCMenu =\n/** @class */\nfunction (_super) {\n  __extends(MDCMenu, _super);\n\n  function MDCMenu() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCMenu.attachTo = function (root) {\n    return new MDCMenu(root);\n  };\n\n  MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {\n    if (menuSurfaceFactory === void 0) {\n      menuSurfaceFactory = function (el) {\n        return new MDCMenuSurface(el);\n      };\n    }\n\n    if (listFactory === void 0) {\n      listFactory = function (el) {\n        return new MDCList(el);\n      };\n    }\n\n    this.menuSurfaceFactory_ = menuSurfaceFactory;\n    this.listFactory_ = listFactory;\n  };\n\n  MDCMenu.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.menuSurface_ = this.menuSurfaceFactory_(this.root);\n    var list = this.root.querySelector(strings.LIST_SELECTOR);\n\n    if (list) {\n      this.list_ = this.listFactory_(list);\n      this.list_.wrapFocus = true;\n    } else {\n      this.list_ = null;\n    }\n\n    this.handleKeydown_ = function (evt) {\n      return _this.foundation.handleKeydown(evt);\n    };\n\n    this.handleItemAction_ = function (evt) {\n      return _this.foundation.handleItemAction(_this.items[evt.detail.index]);\n    };\n\n    this.handleMenuSurfaceOpened_ = function () {\n      return _this.foundation.handleMenuSurfaceOpened();\n    };\n\n    this.menuSurface_.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);\n    this.listen('keydown', this.handleKeydown_);\n    this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);\n  };\n\n  MDCMenu.prototype.destroy = function () {\n    if (this.list_) {\n      this.list_.destroy();\n    }\n\n    this.menuSurface_.destroy();\n    this.menuSurface_.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);\n\n    _super.prototype.destroy.call(this);\n  };\n\n  Object.defineProperty(MDCMenu.prototype, \"open\", {\n    get: function () {\n      return this.menuSurface_.isOpen();\n    },\n    set: function (value) {\n      if (value) {\n        this.menuSurface_.open();\n      } else {\n        this.menuSurface_.close();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenu.prototype, \"wrapFocus\", {\n    get: function () {\n      return this.list_ ? this.list_.wrapFocus : false;\n    },\n    set: function (value) {\n      if (this.list_) {\n        this.list_.wrapFocus = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenu.prototype, \"hasTypeahead\", {\n    /**\n     * Sets whether the menu has typeahead functionality.\n     * @param value Whether typeahead is enabled.\n     */\n    set: function (value) {\n      if (this.list_) {\n        this.list_.hasTypeahead = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenu.prototype, \"typeaheadInProgress\", {\n    /**\n     * @return Whether typeahead logic is currently matching some user prefix.\n     */\n    get: function () {\n      return this.list_ ? this.list_.typeaheadInProgress : false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Given the next desired character from the user, adds it to the typeahead\n   * buffer. Then, attempts to find the next option matching the buffer. Wraps\n   * around if at the end of options.\n   *\n   * @param nextChar The next character to add to the prefix buffer.\n   * @param startingIndex The index from which to start matching. Only relevant\n   *     when starting a new match sequence. To start a new match sequence,\n   *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n   *     to clear after a set interval defined in list foundation. Defaults to\n   *     the currently focused index.\n   * @return The index of the matched item, or -1 if no match.\n   */\n\n  MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n    if (this.list_) {\n      return this.list_.typeaheadMatchItem(nextChar, startingIndex);\n    }\n\n    return -1;\n  };\n  /**\n   * Layout the underlying list element in the case of any dynamic updates\n   * to its structure.\n   */\n\n\n  MDCMenu.prototype.layout = function () {\n    if (this.list_) {\n      this.list_.layout();\n    }\n  };\n\n  Object.defineProperty(MDCMenu.prototype, \"items\", {\n    /**\n     * Return the items within the menu. Note that this only contains the set of elements within\n     * the items container that are proper list items, and not supplemental / presentational DOM\n     * elements.\n     */\n    get: function () {\n      return this.list_ ? this.list_.listElements : [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenu.prototype, \"quickOpen\", {\n    set: function (quickOpen) {\n      this.menuSurface_.quickOpen = quickOpen;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets default focus state where the menu should focus every time when menu\n   * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n   * default.\n   * @param focusState Default focus state.\n   */\n\n  MDCMenu.prototype.setDefaultFocusState = function (focusState) {\n    this.foundation.setDefaultFocusState(focusState);\n  };\n  /**\n   * @param corner Default anchor corner alignment of top-left menu corner.\n   */\n\n\n  MDCMenu.prototype.setAnchorCorner = function (corner) {\n    this.menuSurface_.setAnchorCorner(corner);\n  };\n\n  MDCMenu.prototype.setAnchorMargin = function (margin) {\n    this.menuSurface_.setAnchorMargin(margin);\n  };\n  /**\n   * Sets the list item as the selected row at the specified index.\n   * @param index Index of list item within menu.\n   */\n\n\n  MDCMenu.prototype.setSelectedIndex = function (index) {\n    this.foundation.setSelectedIndex(index);\n  };\n  /**\n   * Sets the enabled state to isEnabled for the menu item at the given index.\n   * @param index Index of the menu item\n   * @param isEnabled The desired enabled state of the menu item.\n   */\n\n\n  MDCMenu.prototype.setEnabled = function (index, isEnabled) {\n    this.foundation.setEnabled(index, isEnabled);\n  };\n  /**\n   * @return The item within the menu at the index specified.\n   */\n\n\n  MDCMenu.prototype.getOptionByIndex = function (index) {\n    var items = this.items;\n\n    if (index < items.length) {\n      return this.items[index];\n    } else {\n      return null;\n    }\n  };\n  /**\n   * @param index A menu item's index.\n   * @return The primary text within the menu at the index specified.\n   */\n\n\n  MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {\n    var item = this.getOptionByIndex(index);\n\n    if (item && this.list_) {\n      return this.list_.getPrimaryText(item) || '';\n    }\n\n    return '';\n  };\n\n  MDCMenu.prototype.setFixedPosition = function (isFixed) {\n    this.menuSurface_.setFixedPosition(isFixed);\n  };\n\n  MDCMenu.prototype.setIsHoisted = function (isHoisted) {\n    this.menuSurface_.setIsHoisted(isHoisted);\n  };\n\n  MDCMenu.prototype.setAbsolutePosition = function (x, y) {\n    this.menuSurface_.setAbsolutePosition(x, y);\n  };\n  /**\n   * Sets the element that the menu-surface is anchored to.\n   */\n\n\n  MDCMenu.prototype.setAnchorElement = function (element) {\n    this.menuSurface_.anchorElement = element;\n  };\n\n  MDCMenu.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClassToElementAtIndex: function (index, className) {\n        var list = _this.items;\n        list[index].classList.add(className);\n      },\n      removeClassFromElementAtIndex: function (index, className) {\n        var list = _this.items;\n        list[index].classList.remove(className);\n      },\n      addAttributeToElementAtIndex: function (index, attr, value) {\n        var list = _this.items;\n        list[index].setAttribute(attr, value);\n      },\n      removeAttributeFromElementAtIndex: function (index, attr) {\n        var list = _this.items;\n        list[index].removeAttribute(attr);\n      },\n      elementContainsClass: function (element, className) {\n        return element.classList.contains(className);\n      },\n      closeSurface: function (skipRestoreFocus) {\n        return _this.menuSurface_.close(skipRestoreFocus);\n      },\n      getElementIndex: function (element) {\n        return _this.items.indexOf(element);\n      },\n      notifySelected: function (evtData) {\n        return _this.emit(strings.SELECTED_EVENT, {\n          index: evtData.index,\n          item: _this.items[evtData.index]\n        });\n      },\n      getMenuItemCount: function () {\n        return _this.items.length;\n      },\n      focusItemAtIndex: function (index) {\n        return _this.items[index].focus();\n      },\n      focusListRoot: function () {\n        return _this.root.querySelector(strings.LIST_SELECTOR).focus();\n      },\n      isSelectableItemAtIndex: function (index) {\n        return !!closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n      },\n      getSelectedSiblingOfItemAtIndex: function (index) {\n        var selectionGroupEl = closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n        var selectedItemEl = selectionGroupEl.querySelector(\".\" + cssClasses.MENU_SELECTED_LIST_ITEM);\n        return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCMenuFoundation(adapter);\n  };\n\n  return MDCMenu;\n}(MDCComponent);\n\nexport { MDCMenu };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { MDCList } from '@material/list/component';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCMenuSurface } from '@material/menu-surface/component';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCMenuFoundation } from './foundation';\nvar MDCMenu = /** @class */ (function (_super) {\n    __extends(MDCMenu, _super);\n    function MDCMenu() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCMenu.attachTo = function (root) {\n        return new MDCMenu(root);\n    };\n    MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {\n        if (menuSurfaceFactory === void 0) { menuSurfaceFactory = function (el) { return new MDCMenuSurface(el); }; }\n        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }\n        this.menuSurfaceFactory_ = menuSurfaceFactory;\n        this.listFactory_ = listFactory;\n    };\n    MDCMenu.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.menuSurface_ = this.menuSurfaceFactory_(this.root);\n        var list = this.root.querySelector(strings.LIST_SELECTOR);\n        if (list) {\n            this.list_ = this.listFactory_(list);\n            this.list_.wrapFocus = true;\n        }\n        else {\n            this.list_ = null;\n        }\n        this.handleKeydown_ = function (evt) { return _this.foundation.handleKeydown(evt); };\n        this.handleItemAction_ = function (evt) {\n            return _this.foundation.handleItemAction(_this.items[evt.detail.index]);\n        };\n        this.handleMenuSurfaceOpened_ = function () {\n            return _this.foundation.handleMenuSurfaceOpened();\n        };\n        this.menuSurface_.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);\n        this.listen('keydown', this.handleKeydown_);\n        this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);\n    };\n    MDCMenu.prototype.destroy = function () {\n        if (this.list_) {\n            this.list_.destroy();\n        }\n        this.menuSurface_.destroy();\n        this.menuSurface_.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened_);\n        this.unlisten('keydown', this.handleKeydown_);\n        this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);\n        _super.prototype.destroy.call(this);\n    };\n    Object.defineProperty(MDCMenu.prototype, \"open\", {\n        get: function () {\n            return this.menuSurface_.isOpen();\n        },\n        set: function (value) {\n            if (value) {\n                this.menuSurface_.open();\n            }\n            else {\n                this.menuSurface_.close();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"wrapFocus\", {\n        get: function () {\n            return this.list_ ? this.list_.wrapFocus : false;\n        },\n        set: function (value) {\n            if (this.list_) {\n                this.list_.wrapFocus = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"hasTypeahead\", {\n        /**\n         * Sets whether the menu has typeahead functionality.\n         * @param value Whether typeahead is enabled.\n         */\n        set: function (value) {\n            if (this.list_) {\n                this.list_.hasTypeahead = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"typeaheadInProgress\", {\n        /**\n         * @return Whether typeahead logic is currently matching some user prefix.\n         */\n        get: function () {\n            return this.list_ ? this.list_.typeaheadInProgress : false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Only relevant\n     *     when starting a new match sequence. To start a new match sequence,\n     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n     *     to clear after a set interval defined in list foundation. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item, or -1 if no match.\n     */\n    MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n        if (this.list_) {\n            return this.list_.typeaheadMatchItem(nextChar, startingIndex);\n        }\n        return -1;\n    };\n    /**\n     * Layout the underlying list element in the case of any dynamic updates\n     * to its structure.\n     */\n    MDCMenu.prototype.layout = function () {\n        if (this.list_) {\n            this.list_.layout();\n        }\n    };\n    Object.defineProperty(MDCMenu.prototype, \"items\", {\n        /**\n         * Return the items within the menu. Note that this only contains the set of elements within\n         * the items container that are proper list items, and not supplemental / presentational DOM\n         * elements.\n         */\n        get: function () {\n            return this.list_ ? this.list_.listElements : [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"quickOpen\", {\n        set: function (quickOpen) {\n            this.menuSurface_.quickOpen = quickOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     * @param focusState Default focus state.\n     */\n    MDCMenu.prototype.setDefaultFocusState = function (focusState) {\n        this.foundation.setDefaultFocusState(focusState);\n    };\n    /**\n     * @param corner Default anchor corner alignment of top-left menu corner.\n     */\n    MDCMenu.prototype.setAnchorCorner = function (corner) {\n        this.menuSurface_.setAnchorCorner(corner);\n    };\n    MDCMenu.prototype.setAnchorMargin = function (margin) {\n        this.menuSurface_.setAnchorMargin(margin);\n    };\n    /**\n     * Sets the list item as the selected row at the specified index.\n     * @param index Index of list item within menu.\n     */\n    MDCMenu.prototype.setSelectedIndex = function (index) {\n        this.foundation.setSelectedIndex(index);\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenu.prototype.setEnabled = function (index, isEnabled) {\n        this.foundation.setEnabled(index, isEnabled);\n    };\n    /**\n     * @return The item within the menu at the index specified.\n     */\n    MDCMenu.prototype.getOptionByIndex = function (index) {\n        var items = this.items;\n        if (index < items.length) {\n            return this.items[index];\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @param index A menu item's index.\n     * @return The primary text within the menu at the index specified.\n     */\n    MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {\n        var item = this.getOptionByIndex(index);\n        if (item && this.list_) {\n            return this.list_.getPrimaryText(item) || '';\n        }\n        return '';\n    };\n    MDCMenu.prototype.setFixedPosition = function (isFixed) {\n        this.menuSurface_.setFixedPosition(isFixed);\n    };\n    MDCMenu.prototype.setIsHoisted = function (isHoisted) {\n        this.menuSurface_.setIsHoisted(isHoisted);\n    };\n    MDCMenu.prototype.setAbsolutePosition = function (x, y) {\n        this.menuSurface_.setAbsolutePosition(x, y);\n    };\n    /**\n     * Sets the element that the menu-surface is anchored to.\n     */\n    MDCMenu.prototype.setAnchorElement = function (element) {\n        this.menuSurface_.anchorElement = element;\n    };\n    MDCMenu.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClassToElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.add(className);\n            },\n            removeClassFromElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.remove(className);\n            },\n            addAttributeToElementAtIndex: function (index, attr, value) {\n                var list = _this.items;\n                list[index].setAttribute(attr, value);\n            },\n            removeAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                list[index].removeAttribute(attr);\n            },\n            elementContainsClass: function (element, className) {\n                return element.classList.contains(className);\n            },\n            closeSurface: function (skipRestoreFocus) {\n                return _this.menuSurface_.close(skipRestoreFocus);\n            },\n            getElementIndex: function (element) { return _this.items.indexOf(element); },\n            notifySelected: function (evtData) {\n                return _this.emit(strings.SELECTED_EVENT, {\n                    index: evtData.index,\n                    item: _this.items[evtData.index],\n                });\n            },\n            getMenuItemCount: function () { return _this.items.length; },\n            focusItemAtIndex: function (index) { return _this.items[index].focus(); },\n            focusListRoot: function () {\n                return _this.root.querySelector(strings.LIST_SELECTOR)\n                    .focus();\n            },\n            isSelectableItemAtIndex: function (index) {\n                return !!closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n            },\n            getSelectedSiblingOfItemAtIndex: function (index) {\n                var selectionGroupEl = closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n                var selectedItemEl = selectionGroupEl.querySelector(\".\" + cssClasses.MENU_SELECTED_LIST_ITEM);\n                return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCMenuFoundation(adapter);\n    };\n    return MDCMenu;\n}(MDCComponent));\nexport { MDCMenu };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}