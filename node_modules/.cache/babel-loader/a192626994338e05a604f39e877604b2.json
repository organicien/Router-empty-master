{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCIconButtonToggleFoundation } from './foundation';\nvar strings = MDCIconButtonToggleFoundation.strings;\n\nvar MDCIconButtonToggle =\n/** @class */\nfunction (_super) {\n  __extends(MDCIconButtonToggle, _super);\n\n  function MDCIconButtonToggle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rippleComponent = _this.createRipple();\n    return _this;\n  }\n\n  MDCIconButtonToggle.attachTo = function (root) {\n    return new MDCIconButtonToggle(root);\n  };\n\n  MDCIconButtonToggle.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleClick = function () {\n      _this.foundation.handleClick();\n    };\n\n    this.listen('click', this.handleClick);\n  };\n\n  MDCIconButtonToggle.prototype.destroy = function () {\n    this.unlisten('click', this.handleClick);\n    this.ripple.destroy();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCIconButtonToggle.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      hasClass: function (className) {\n        return _this.root.classList.contains(className);\n      },\n      notifyChange: function (evtData) {\n        _this.emit(strings.CHANGE_EVENT, evtData);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      getAttr: function (attrName) {\n        return _this.root.getAttribute(attrName);\n      },\n      setAttr: function (attrName, attrValue) {\n        return _this.root.setAttribute(attrName, attrValue);\n      }\n    };\n    return new MDCIconButtonToggleFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCIconButtonToggle.prototype, \"ripple\", {\n    get: function () {\n      return this.rippleComponent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCIconButtonToggle.prototype, \"on\", {\n    get: function () {\n      return this.foundation.isOn();\n    },\n    set: function (isOn) {\n      this.foundation.toggle(isOn);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCIconButtonToggle.prototype.createRipple = function () {\n    var ripple = new MDCRipple(this.root);\n    ripple.unbounded = true;\n    return ripple;\n  };\n\n  return MDCIconButtonToggle;\n}(MDCComponent);\n\nexport { MDCIconButtonToggle };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQ,YAAR,QAA2B,0BAA3B;AAEA,SAAQ,SAAR,QAAwB,4BAAxB;AAEA,SAAQ,6BAAR,QAA4C,cAA5C;AAGO,IAAA,OAAA,GAAA,6BAAA,CAAA,OAAA;;AAEP,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;AAAzC,WAAA,mBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAKmB,IAAA,KAAA,CAAA,eAAA,GAA6B,KAAI,CAAC,YAAL,EAA7B;;AAoDlB;;AAxDQ,EAAA,mBAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAiC;AAC/B,WAAO,IAAI,mBAAJ,CAAwB,IAAxB,CAAP;AACD,GAFM;;AAQP,EAAA,mBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,WAAL,GAAmB,YAAA;AACjB,MAAA,KAAI,CAAC,UAAL,CAAgB,WAAhB;AACD,KAFD;;AAGA,SAAK,MAAL,CAAY,OAAZ,EAAqB,KAAK,WAA1B;AACD,GALD;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,OAAd,EAAuB,KAAK,WAA5B;AACA,SAAK,MAAL,CAAY,OAAZ;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;AACD,GAJD;;AAMA,EAAA,mBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;;;AACA,QAAM,OAAO,GAA+B;AAC1C,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,GAApB,CAAA,SAAA,CAAA;AAAkC,OADjB;AAE1C,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,QAApB,CAAA,SAAA,CAAA;AAAuC,OAFtB;AAG1C,MAAA,YAAY,EAAE,UAAC,OAAD,EAAQ;AACpB,QAAA,KAAI,CAAC,IAAL,CACI,OAAO,CAAC,YADZ,EAC0B,OAD1B;AAED,OANyC;AAO1C,MAAA,WAAW,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,MAApB,CAAA,SAAA,CAAA;AAAqC,OAPvB;AAQ1C,MAAA,OAAO,EAAE,UAAC,QAAD,EAAS;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,YAAV,CAAA,QAAA,CAAA;AAAgC,OARb;AAS1C,MAAA,OAAO,EAAE,UAAC,QAAD,EAAW,SAAX,EAAoB;AACzB,eAAA,KAAI,CAAC,IAAL,CAAU,YAAV,CAAuB,QAAvB,EAAiC,SAAjC,CAAA;AAA2C;AAVL,KAA5C;AAYA,WAAO,IAAI,6BAAJ,CAAkC,OAAlC,CAAP;AACD,GAhBD;;AAkBA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;SAAV,YAAA;AACE,aAAO,KAAK,eAAZ;AACD,KAFS;oBAAA;;AAAA,GAAV;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,mBAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;SAAN,YAAA;AACE,aAAO,KAAK,UAAL,CAAgB,IAAhB,EAAP;AACD,KAFK;SAIN,UAAO,IAAP,EAAoB;AAClB,WAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AACD,KANK;oBAAA;;AAAA,GAAN;;AAQQ,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AACE,QAAM,MAAM,GAAG,IAAI,SAAJ,CAAc,KAAK,IAAnB,CAAf;AACA,IAAA,MAAM,CAAC,SAAP,GAAmB,IAAnB;AACA,WAAO,MAAP;AACD,GAJO;;AAKV,SAAA,mBAAA;AAAC,CAzDD,CAAyC,YAAzC,CAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCIconButtonToggleFoundation } from './foundation';\nvar strings = MDCIconButtonToggleFoundation.strings;\nvar MDCIconButtonToggle = /** @class */ (function (_super) {\n    __extends(MDCIconButtonToggle, _super);\n    function MDCIconButtonToggle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rippleComponent = _this.createRipple();\n        return _this;\n    }\n    MDCIconButtonToggle.attachTo = function (root) {\n        return new MDCIconButtonToggle(root);\n    };\n    MDCIconButtonToggle.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.handleClick = function () {\n            _this.foundation.handleClick();\n        };\n        this.listen('click', this.handleClick);\n    };\n    MDCIconButtonToggle.prototype.destroy = function () {\n        this.unlisten('click', this.handleClick);\n        this.ripple.destroy();\n        _super.prototype.destroy.call(this);\n    };\n    MDCIconButtonToggle.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            notifyChange: function (evtData) {\n                _this.emit(strings.CHANGE_EVENT, evtData);\n            },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            getAttr: function (attrName) { return _this.root.getAttribute(attrName); },\n            setAttr: function (attrName, attrValue) {\n                return _this.root.setAttribute(attrName, attrValue);\n            },\n        };\n        return new MDCIconButtonToggleFoundation(adapter);\n    };\n    Object.defineProperty(MDCIconButtonToggle.prototype, \"ripple\", {\n        get: function () {\n            return this.rippleComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCIconButtonToggle.prototype, \"on\", {\n        get: function () {\n            return this.foundation.isOn();\n        },\n        set: function (isOn) {\n            this.foundation.toggle(isOn);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCIconButtonToggle.prototype.createRipple = function () {\n        var ripple = new MDCRipple(this.root);\n        ripple.unbounded = true;\n        return ripple;\n    };\n    return MDCIconButtonToggle;\n}(MDCComponent));\nexport { MDCIconButtonToggle };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}