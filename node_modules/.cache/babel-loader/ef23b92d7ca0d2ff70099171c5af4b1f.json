{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nvar OPENING = cssClasses.OPENING,\n    OPEN = cssClasses.OPEN,\n    CLOSING = cssClasses.CLOSING;\nvar REASON_ACTION = strings.REASON_ACTION,\n    REASON_DISMISS = strings.REASON_DISMISS;\n\nvar MDCSnackbarFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCSnackbarFoundation, _super);\n\n  function MDCSnackbarFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation.defaultAdapter), adapter)) || this;\n\n    _this.isOpen_ = false;\n    _this.animationFrame_ = 0;\n    _this.animationTimer_ = 0;\n    _this.autoDismissTimer_ = 0;\n    _this.autoDismissTimeoutMs_ = numbers.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;\n    _this.closeOnEscape_ = true;\n    return _this;\n  }\n\n  Object.defineProperty(MDCSnackbarFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbarFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbarFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbarFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        announce: function () {\n          return undefined;\n        },\n        notifyClosed: function () {\n          return undefined;\n        },\n        notifyClosing: function () {\n          return undefined;\n        },\n        notifyOpened: function () {\n          return undefined;\n        },\n        notifyOpening: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCSnackbarFoundation.prototype.destroy = function () {\n    this.clearAutoDismissTimer_();\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = 0;\n    clearTimeout(this.animationTimer_);\n    this.animationTimer_ = 0;\n    this.adapter.removeClass(OPENING);\n    this.adapter.removeClass(OPEN);\n    this.adapter.removeClass(CLOSING);\n  };\n\n  MDCSnackbarFoundation.prototype.open = function () {\n    var _this = this;\n\n    this.clearAutoDismissTimer_();\n    this.isOpen_ = true;\n    this.adapter.notifyOpening();\n    this.adapter.removeClass(CLOSING);\n    this.adapter.addClass(OPENING);\n    this.adapter.announce(); // Wait a frame once display is no longer \"none\", to establish basis for animation\n\n    this.runNextAnimationFrame_(function () {\n      _this.adapter.addClass(OPEN);\n\n      _this.animationTimer_ = setTimeout(function () {\n        var timeoutMs = _this.getTimeoutMs();\n\n        _this.handleAnimationTimerEnd_();\n\n        _this.adapter.notifyOpened();\n\n        if (timeoutMs !== numbers.INDETERMINATE) {\n          _this.autoDismissTimer_ = setTimeout(function () {\n            _this.close(REASON_DISMISS);\n          }, timeoutMs);\n        }\n      }, numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n    });\n  };\n  /**\n   * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the\n   *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom\n   *     client-specific values may also be used if desired.\n   */\n\n\n  MDCSnackbarFoundation.prototype.close = function (reason) {\n    var _this = this;\n\n    if (reason === void 0) {\n      reason = '';\n    }\n\n    if (!this.isOpen_) {\n      // Avoid redundant close calls (and events), e.g. repeated interactions as the snackbar is animating closed\n      return;\n    }\n\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = 0;\n    this.clearAutoDismissTimer_();\n    this.isOpen_ = false;\n    this.adapter.notifyClosing(reason);\n    this.adapter.addClass(cssClasses.CLOSING);\n    this.adapter.removeClass(cssClasses.OPEN);\n    this.adapter.removeClass(cssClasses.OPENING);\n    clearTimeout(this.animationTimer_);\n    this.animationTimer_ = setTimeout(function () {\n      _this.handleAnimationTimerEnd_();\n\n      _this.adapter.notifyClosed(reason);\n    }, numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);\n  };\n\n  MDCSnackbarFoundation.prototype.isOpen = function () {\n    return this.isOpen_;\n  };\n\n  MDCSnackbarFoundation.prototype.getTimeoutMs = function () {\n    return this.autoDismissTimeoutMs_;\n  };\n\n  MDCSnackbarFoundation.prototype.setTimeoutMs = function (timeoutMs) {\n    // Use shorter variable names to make the code more readable\n    var minValue = numbers.MIN_AUTO_DISMISS_TIMEOUT_MS;\n    var maxValue = numbers.MAX_AUTO_DISMISS_TIMEOUT_MS;\n    var indeterminateValue = numbers.INDETERMINATE;\n\n    if (timeoutMs === numbers.INDETERMINATE || timeoutMs <= maxValue && timeoutMs >= minValue) {\n      this.autoDismissTimeoutMs_ = timeoutMs;\n    } else {\n      throw new Error(\"\\n        timeoutMs must be an integer in the range \" + minValue + \"\\u2013\" + maxValue + \"\\n        (or \" + indeterminateValue + \" to disable), but got '\" + timeoutMs + \"'\");\n    }\n  };\n\n  MDCSnackbarFoundation.prototype.getCloseOnEscape = function () {\n    return this.closeOnEscape_;\n  };\n\n  MDCSnackbarFoundation.prototype.setCloseOnEscape = function (closeOnEscape) {\n    this.closeOnEscape_ = closeOnEscape;\n  };\n\n  MDCSnackbarFoundation.prototype.handleKeyDown = function (evt) {\n    var isEscapeKey = evt.key === 'Escape' || evt.keyCode === 27;\n\n    if (isEscapeKey && this.getCloseOnEscape()) {\n      this.close(REASON_DISMISS);\n    }\n  };\n\n  MDCSnackbarFoundation.prototype.handleActionButtonClick = function (_evt) {\n    this.close(REASON_ACTION);\n  };\n\n  MDCSnackbarFoundation.prototype.handleActionIconClick = function (_evt) {\n    this.close(REASON_DISMISS);\n  };\n\n  MDCSnackbarFoundation.prototype.clearAutoDismissTimer_ = function () {\n    clearTimeout(this.autoDismissTimer_);\n    this.autoDismissTimer_ = 0;\n  };\n\n  MDCSnackbarFoundation.prototype.handleAnimationTimerEnd_ = function () {\n    this.animationTimer_ = 0;\n    this.adapter.removeClass(cssClasses.OPENING);\n    this.adapter.removeClass(cssClasses.CLOSING);\n  };\n  /**\n   * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n   */\n\n\n  MDCSnackbarFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n    var _this = this;\n\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = requestAnimationFrame(function () {\n      _this.animationFrame_ = 0;\n      clearTimeout(_this.animationTimer_);\n      _this.animationTimer_ = setTimeout(callback, 0);\n    });\n  };\n\n  return MDCSnackbarFoundation;\n}(MDCFoundation);\n\nexport { MDCSnackbarFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCSnackbarFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nvar OPENING = cssClasses.OPENING, OPEN = cssClasses.OPEN, CLOSING = cssClasses.CLOSING;\nvar REASON_ACTION = strings.REASON_ACTION, REASON_DISMISS = strings.REASON_DISMISS;\nvar MDCSnackbarFoundation = /** @class */ (function (_super) {\n    __extends(MDCSnackbarFoundation, _super);\n    function MDCSnackbarFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation.defaultAdapter), adapter)) || this;\n        _this.isOpen_ = false;\n        _this.animationFrame_ = 0;\n        _this.animationTimer_ = 0;\n        _this.autoDismissTimer_ = 0;\n        _this.autoDismissTimeoutMs_ = numbers.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;\n        _this.closeOnEscape_ = true;\n        return _this;\n    }\n    Object.defineProperty(MDCSnackbarFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbarFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbarFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbarFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                announce: function () { return undefined; },\n                notifyClosed: function () { return undefined; },\n                notifyClosing: function () { return undefined; },\n                notifyOpened: function () { return undefined; },\n                notifyOpening: function () { return undefined; },\n                removeClass: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCSnackbarFoundation.prototype.destroy = function () {\n        this.clearAutoDismissTimer_();\n        cancelAnimationFrame(this.animationFrame_);\n        this.animationFrame_ = 0;\n        clearTimeout(this.animationTimer_);\n        this.animationTimer_ = 0;\n        this.adapter.removeClass(OPENING);\n        this.adapter.removeClass(OPEN);\n        this.adapter.removeClass(CLOSING);\n    };\n    MDCSnackbarFoundation.prototype.open = function () {\n        var _this = this;\n        this.clearAutoDismissTimer_();\n        this.isOpen_ = true;\n        this.adapter.notifyOpening();\n        this.adapter.removeClass(CLOSING);\n        this.adapter.addClass(OPENING);\n        this.adapter.announce();\n        // Wait a frame once display is no longer \"none\", to establish basis for animation\n        this.runNextAnimationFrame_(function () {\n            _this.adapter.addClass(OPEN);\n            _this.animationTimer_ = setTimeout(function () {\n                var timeoutMs = _this.getTimeoutMs();\n                _this.handleAnimationTimerEnd_();\n                _this.adapter.notifyOpened();\n                if (timeoutMs !== numbers.INDETERMINATE) {\n                    _this.autoDismissTimer_ = setTimeout(function () {\n                        _this.close(REASON_DISMISS);\n                    }, timeoutMs);\n                }\n            }, numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);\n        });\n    };\n    /**\n     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the\n     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom\n     *     client-specific values may also be used if desired.\n     */\n    MDCSnackbarFoundation.prototype.close = function (reason) {\n        var _this = this;\n        if (reason === void 0) { reason = ''; }\n        if (!this.isOpen_) {\n            // Avoid redundant close calls (and events), e.g. repeated interactions as the snackbar is animating closed\n            return;\n        }\n        cancelAnimationFrame(this.animationFrame_);\n        this.animationFrame_ = 0;\n        this.clearAutoDismissTimer_();\n        this.isOpen_ = false;\n        this.adapter.notifyClosing(reason);\n        this.adapter.addClass(cssClasses.CLOSING);\n        this.adapter.removeClass(cssClasses.OPEN);\n        this.adapter.removeClass(cssClasses.OPENING);\n        clearTimeout(this.animationTimer_);\n        this.animationTimer_ = setTimeout(function () {\n            _this.handleAnimationTimerEnd_();\n            _this.adapter.notifyClosed(reason);\n        }, numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);\n    };\n    MDCSnackbarFoundation.prototype.isOpen = function () {\n        return this.isOpen_;\n    };\n    MDCSnackbarFoundation.prototype.getTimeoutMs = function () {\n        return this.autoDismissTimeoutMs_;\n    };\n    MDCSnackbarFoundation.prototype.setTimeoutMs = function (timeoutMs) {\n        // Use shorter variable names to make the code more readable\n        var minValue = numbers.MIN_AUTO_DISMISS_TIMEOUT_MS;\n        var maxValue = numbers.MAX_AUTO_DISMISS_TIMEOUT_MS;\n        var indeterminateValue = numbers.INDETERMINATE;\n        if (timeoutMs === numbers.INDETERMINATE || (timeoutMs <= maxValue && timeoutMs >= minValue)) {\n            this.autoDismissTimeoutMs_ = timeoutMs;\n        }\n        else {\n            throw new Error(\"\\n        timeoutMs must be an integer in the range \" + minValue + \"\\u2013\" + maxValue + \"\\n        (or \" + indeterminateValue + \" to disable), but got '\" + timeoutMs + \"'\");\n        }\n    };\n    MDCSnackbarFoundation.prototype.getCloseOnEscape = function () {\n        return this.closeOnEscape_;\n    };\n    MDCSnackbarFoundation.prototype.setCloseOnEscape = function (closeOnEscape) {\n        this.closeOnEscape_ = closeOnEscape;\n    };\n    MDCSnackbarFoundation.prototype.handleKeyDown = function (evt) {\n        var isEscapeKey = evt.key === 'Escape' || evt.keyCode === 27;\n        if (isEscapeKey && this.getCloseOnEscape()) {\n            this.close(REASON_DISMISS);\n        }\n    };\n    MDCSnackbarFoundation.prototype.handleActionButtonClick = function (_evt) {\n        this.close(REASON_ACTION);\n    };\n    MDCSnackbarFoundation.prototype.handleActionIconClick = function (_evt) {\n        this.close(REASON_DISMISS);\n    };\n    MDCSnackbarFoundation.prototype.clearAutoDismissTimer_ = function () {\n        clearTimeout(this.autoDismissTimer_);\n        this.autoDismissTimer_ = 0;\n    };\n    MDCSnackbarFoundation.prototype.handleAnimationTimerEnd_ = function () {\n        this.animationTimer_ = 0;\n        this.adapter.removeClass(cssClasses.OPENING);\n        this.adapter.removeClass(cssClasses.CLOSING);\n    };\n    /**\n     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n     */\n    MDCSnackbarFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n        var _this = this;\n        cancelAnimationFrame(this.animationFrame_);\n        this.animationFrame_ = requestAnimationFrame(function () {\n            _this.animationFrame_ = 0;\n            clearTimeout(_this.animationTimer_);\n            _this.animationTimer_ = setTimeout(callback, 0);\n        });\n    };\n    return MDCSnackbarFoundation;\n}(MDCFoundation));\nexport { MDCSnackbarFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSnackbarFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}