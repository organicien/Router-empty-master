{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { cssClasses } from '../constants';\nimport { MDCTopAppBarBaseFoundation } from '../foundation';\n\nvar MDCShortTopAppBarFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCShortTopAppBarFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n\n\n  function MDCShortTopAppBarFoundation(adapter) {\n    var _this = _super.call(this, adapter) || this;\n\n    _this.isCollapsed_ = false;\n    _this.isAlwaysCollapsed_ = false;\n    return _this;\n  }\n\n  Object.defineProperty(MDCShortTopAppBarFoundation.prototype, \"isCollapsed\", {\n    // Public visibility for backward compatibility.\n    get: function () {\n      return this.isCollapsed_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCShortTopAppBarFoundation.prototype.init = function () {\n    _super.prototype.init.call(this);\n\n    if (this.adapter.getTotalActionItems() > 0) {\n      this.adapter.addClass(cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);\n    } // If initialized with SHORT_COLLAPSED_CLASS, the bar should always be collapsed\n\n\n    this.setAlwaysCollapsed(this.adapter.hasClass(cssClasses.SHORT_COLLAPSED_CLASS));\n  };\n  /**\n   * Set if the short top app bar should always be collapsed.\n   *\n   * @param value When `true`, bar will always be collapsed. When `false`, bar may collapse or expand based on scroll.\n   */\n\n\n  MDCShortTopAppBarFoundation.prototype.setAlwaysCollapsed = function (value) {\n    this.isAlwaysCollapsed_ = !!value;\n\n    if (this.isAlwaysCollapsed_) {\n      this.collapse_();\n    } else {\n      // let maybeCollapseBar_ determine if the bar should be collapsed\n      this.maybeCollapseBar_();\n    }\n  };\n\n  MDCShortTopAppBarFoundation.prototype.getAlwaysCollapsed = function () {\n    return this.isAlwaysCollapsed_;\n  };\n  /**\n   * Scroll handler for applying/removing the collapsed modifier class on the short top app bar.\n   * @override\n   */\n\n\n  MDCShortTopAppBarFoundation.prototype.handleTargetScroll = function () {\n    this.maybeCollapseBar_();\n  };\n\n  MDCShortTopAppBarFoundation.prototype.maybeCollapseBar_ = function () {\n    if (this.isAlwaysCollapsed_) {\n      return;\n    }\n\n    var currentScroll = this.adapter.getViewportScrollY();\n\n    if (currentScroll <= 0) {\n      if (this.isCollapsed_) {\n        this.uncollapse_();\n      }\n    } else {\n      if (!this.isCollapsed_) {\n        this.collapse_();\n      }\n    }\n  };\n\n  MDCShortTopAppBarFoundation.prototype.uncollapse_ = function () {\n    this.adapter.removeClass(cssClasses.SHORT_COLLAPSED_CLASS);\n    this.isCollapsed_ = false;\n  };\n\n  MDCShortTopAppBarFoundation.prototype.collapse_ = function () {\n    this.adapter.addClass(cssClasses.SHORT_COLLAPSED_CLASS);\n    this.isCollapsed_ = true;\n  };\n\n  return MDCShortTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation);\n\nexport { MDCShortTopAppBarFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCShortTopAppBarFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,0BAAR,QAAyC,eAAzC;;AAEA,IAAA,2BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiD,EAAA,SAAA,CAAA,2BAAA,EAAA,MAAA,CAAA;AAU/C;;;AACA,WAAA,2BAAA,CAAY,OAAZ,EAAkD;AAAlD,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IADhB;;AALQ,IAAA,KAAA,CAAA,YAAA,GAAe,KAAf;AAEA,IAAA,KAAA,CAAA,kBAAA,GAAqB,KAArB;;AAKP;;AAXD,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,aAAJ,EAAe;AADf;SACA,YAAA;AACE,aAAO,KAAK,YAAZ;AACD,KAFc;oBAAA;;AAAA,GAAf;;AAaA,EAAA,2BAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AAEA,QAAI,KAAK,OAAL,CAAa,mBAAb,KAAqC,CAAzC,EAA4C;AAC1C,WAAK,OAAL,CAAa,QAAb,CAAsB,UAAU,CAAC,2BAAjC;AACD,KALH,CAOE;;;AACA,SAAK,kBAAL,CACE,KAAK,OAAL,CAAa,QAAb,CAAsB,UAAU,CAAC,qBAAjC,CADF;AAED,GAVD;AAYA;;;;;;;AAKA,EAAA,2BAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,KAAnB,EAAiC;AAC/B,SAAK,kBAAL,GAA0B,CAAC,CAAC,KAA5B;;AACA,QAAI,KAAK,kBAAT,EAA6B;AAC3B,WAAK,SAAL;AACD,KAFD,MAEO;AACL;AACA,WAAK,iBAAL;AACD;AACF,GARD;;AAUA,EAAA,2BAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,WAAO,KAAK,kBAAZ;AACD,GAFD;AAIA;;;;;;AAIA,EAAA,2BAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,SAAK,iBAAL;AACD,GAFD;;AAIQ,EAAA,2BAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACE,QAAI,KAAK,kBAAT,EAA6B;AAC3B;AACD;;AACD,QAAM,aAAa,GAAG,KAAK,OAAL,CAAa,kBAAb,EAAtB;;AAEA,QAAI,aAAa,IAAI,CAArB,EAAwB;AACtB,UAAI,KAAK,YAAT,EAAuB;AACrB,aAAK,WAAL;AACD;AACF,KAJD,MAIO;AACL,UAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,aAAK,SAAL;AACD;AACF;AACF,GAfO;;AAiBA,EAAA,2BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,YAAA;AACE,SAAK,OAAL,CAAa,WAAb,CAAyB,UAAU,CAAC,qBAApC;AACA,SAAK,YAAL,GAAoB,KAApB;AACD,GAHO;;AAKA,EAAA,2BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,YAAA;AACE,SAAK,OAAL,CAAa,QAAb,CAAsB,UAAU,CAAC,qBAAjC;AACA,SAAK,YAAL,GAAoB,IAApB;AACD,GAHO;;AAIV,SAAA,2BAAA;AAAC,CAhFD,CAAiD,0BAAjD,CAAA;;wCAkFA;;AACA,eAAe,2BAAf","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { cssClasses } from '../constants';\nimport { MDCTopAppBarBaseFoundation } from '../foundation';\nvar MDCShortTopAppBarFoundation = /** @class */ (function (_super) {\n    __extends(MDCShortTopAppBarFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    function MDCShortTopAppBarFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        _this.isCollapsed_ = false;\n        _this.isAlwaysCollapsed_ = false;\n        return _this;\n    }\n    Object.defineProperty(MDCShortTopAppBarFoundation.prototype, \"isCollapsed\", {\n        // Public visibility for backward compatibility.\n        get: function () {\n            return this.isCollapsed_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCShortTopAppBarFoundation.prototype.init = function () {\n        _super.prototype.init.call(this);\n        if (this.adapter.getTotalActionItems() > 0) {\n            this.adapter.addClass(cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);\n        }\n        // If initialized with SHORT_COLLAPSED_CLASS, the bar should always be collapsed\n        this.setAlwaysCollapsed(this.adapter.hasClass(cssClasses.SHORT_COLLAPSED_CLASS));\n    };\n    /**\n     * Set if the short top app bar should always be collapsed.\n     *\n     * @param value When `true`, bar will always be collapsed. When `false`, bar may collapse or expand based on scroll.\n     */\n    MDCShortTopAppBarFoundation.prototype.setAlwaysCollapsed = function (value) {\n        this.isAlwaysCollapsed_ = !!value;\n        if (this.isAlwaysCollapsed_) {\n            this.collapse_();\n        }\n        else {\n            // let maybeCollapseBar_ determine if the bar should be collapsed\n            this.maybeCollapseBar_();\n        }\n    };\n    MDCShortTopAppBarFoundation.prototype.getAlwaysCollapsed = function () {\n        return this.isAlwaysCollapsed_;\n    };\n    /**\n     * Scroll handler for applying/removing the collapsed modifier class on the short top app bar.\n     * @override\n     */\n    MDCShortTopAppBarFoundation.prototype.handleTargetScroll = function () {\n        this.maybeCollapseBar_();\n    };\n    MDCShortTopAppBarFoundation.prototype.maybeCollapseBar_ = function () {\n        if (this.isAlwaysCollapsed_) {\n            return;\n        }\n        var currentScroll = this.adapter.getViewportScrollY();\n        if (currentScroll <= 0) {\n            if (this.isCollapsed_) {\n                this.uncollapse_();\n            }\n        }\n        else {\n            if (!this.isCollapsed_) {\n                this.collapse_();\n            }\n        }\n    };\n    MDCShortTopAppBarFoundation.prototype.uncollapse_ = function () {\n        this.adapter.removeClass(cssClasses.SHORT_COLLAPSED_CLASS);\n        this.isCollapsed_ = false;\n    };\n    MDCShortTopAppBarFoundation.prototype.collapse_ = function () {\n        this.adapter.addClass(cssClasses.SHORT_COLLAPSED_CLASS);\n        this.isCollapsed_ = true;\n    };\n    return MDCShortTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation));\nexport { MDCShortTopAppBarFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCShortTopAppBarFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}