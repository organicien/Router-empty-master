{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { numbers } from '../constants';\nimport { MDCTopAppBarBaseFoundation } from '../foundation';\nvar INITIAL_VALUE = 0;\n\nvar MDCTopAppBarFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTopAppBarFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n\n\n  function MDCTopAppBarFoundation(adapter) {\n    var _this = _super.call(this, adapter) || this;\n    /**\n     * Indicates if the top app bar was docked in the previous scroll handler iteration.\n     */\n\n\n    _this.wasDocked_ = true;\n    /**\n     * Indicates if the top app bar is docked in the fully shown position.\n     */\n\n    _this.isDockedShowing_ = true;\n    /**\n     * Variable for current scroll position of the top app bar\n     */\n\n    _this.currentAppBarOffsetTop_ = 0;\n    /**\n     * Used to prevent the top app bar from being scrolled out of view during resize events\n     */\n\n    _this.isCurrentlyBeingResized_ = false;\n    /**\n     * The timeout that's used to throttle the resize events\n     */\n\n    _this.resizeThrottleId_ = INITIAL_VALUE;\n    /**\n     * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize\n     */\n\n    _this.resizeDebounceId_ = INITIAL_VALUE;\n    _this.lastScrollPosition_ = _this.adapter.getViewportScrollY();\n    _this.topAppBarHeight_ = _this.adapter.getTopAppBarHeight();\n    return _this;\n  }\n\n  MDCTopAppBarFoundation.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.adapter.setStyle('top', '');\n  };\n  /**\n   * Scroll handler for the default scroll behavior of the top app bar.\n   * @override\n   */\n\n\n  MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {\n    var currentScrollPosition = Math.max(this.adapter.getViewportScrollY(), 0);\n    var diff = currentScrollPosition - this.lastScrollPosition_;\n    this.lastScrollPosition_ = currentScrollPosition; // If the window is being resized the lastScrollPosition_ needs to be updated but the\n    // current scroll of the top app bar should stay in the same position.\n\n    if (!this.isCurrentlyBeingResized_) {\n      this.currentAppBarOffsetTop_ -= diff;\n\n      if (this.currentAppBarOffsetTop_ > 0) {\n        this.currentAppBarOffsetTop_ = 0;\n      } else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {\n        this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;\n      }\n\n      this.moveTopAppBar_();\n    }\n  };\n  /**\n   * Top app bar resize handler that throttle/debounce functions that execute updates.\n   * @override\n   */\n\n\n  MDCTopAppBarFoundation.prototype.handleWindowResize = function () {\n    var _this = this; // Throttle resize events 10 p/s\n\n\n    if (!this.resizeThrottleId_) {\n      this.resizeThrottleId_ = setTimeout(function () {\n        _this.resizeThrottleId_ = INITIAL_VALUE;\n\n        _this.throttledResizeHandler_();\n      }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n    }\n\n    this.isCurrentlyBeingResized_ = true;\n\n    if (this.resizeDebounceId_) {\n      clearTimeout(this.resizeDebounceId_);\n    }\n\n    this.resizeDebounceId_ = setTimeout(function () {\n      _this.handleTargetScroll();\n\n      _this.isCurrentlyBeingResized_ = false;\n      _this.resizeDebounceId_ = INITIAL_VALUE;\n    }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n  };\n  /**\n   * Function to determine if the DOM needs to update.\n   */\n\n\n  MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {\n    var offscreenBoundaryTop = -this.topAppBarHeight_;\n    var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;\n    var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;\n    var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen; // If it's partially showing, it can't be docked.\n\n    if (partiallyShowing) {\n      this.wasDocked_ = false;\n    } else {\n      // Not previously docked and not partially showing, it's now docked.\n      if (!this.wasDocked_) {\n        this.wasDocked_ = true;\n        return true;\n      } else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {\n        this.isDockedShowing_ = hasAnyPixelsOnscreen;\n        return true;\n      }\n    }\n\n    return partiallyShowing;\n  };\n  /**\n   * Function to move the top app bar if needed.\n   */\n\n\n  MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {\n    if (this.checkForUpdate_()) {\n      // Once the top app bar is fully hidden we use the max potential top app bar height as our offset\n      // so the top app bar doesn't show if the window resizes and the new height > the old height.\n      var offset = this.currentAppBarOffsetTop_;\n\n      if (Math.abs(offset) >= this.topAppBarHeight_) {\n        offset = -numbers.MAX_TOP_APP_BAR_HEIGHT;\n      }\n\n      this.adapter.setStyle('top', offset + 'px');\n    }\n  };\n  /**\n   * Throttled function that updates the top app bar scrolled values if the\n   * top app bar height changes.\n   */\n\n\n  MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {\n    var currentHeight = this.adapter.getTopAppBarHeight();\n\n    if (this.topAppBarHeight_ !== currentHeight) {\n      this.wasDocked_ = false; // Since the top app bar has a different height depending on the screen width, this\n      // will ensure that the top app bar remains in the correct location if\n      // completely hidden and a resize makes the top app bar a different height.\n\n      this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;\n      this.topAppBarHeight_ = currentHeight;\n    }\n\n    this.handleTargetScroll();\n  };\n\n  return MDCTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation);\n\nexport { MDCTopAppBarFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTopAppBarFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { numbers } from '../constants';\nimport { MDCTopAppBarBaseFoundation } from '../foundation';\nvar INITIAL_VALUE = 0;\nvar MDCTopAppBarFoundation = /** @class */ (function (_super) {\n    __extends(MDCTopAppBarFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    function MDCTopAppBarFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        /**\n         * Indicates if the top app bar was docked in the previous scroll handler iteration.\n         */\n        _this.wasDocked_ = true;\n        /**\n         * Indicates if the top app bar is docked in the fully shown position.\n         */\n        _this.isDockedShowing_ = true;\n        /**\n         * Variable for current scroll position of the top app bar\n         */\n        _this.currentAppBarOffsetTop_ = 0;\n        /**\n         * Used to prevent the top app bar from being scrolled out of view during resize events\n         */\n        _this.isCurrentlyBeingResized_ = false;\n        /**\n         * The timeout that's used to throttle the resize events\n         */\n        _this.resizeThrottleId_ = INITIAL_VALUE;\n        /**\n         * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize\n         */\n        _this.resizeDebounceId_ = INITIAL_VALUE;\n        _this.lastScrollPosition_ = _this.adapter.getViewportScrollY();\n        _this.topAppBarHeight_ = _this.adapter.getTopAppBarHeight();\n        return _this;\n    }\n    MDCTopAppBarFoundation.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.adapter.setStyle('top', '');\n    };\n    /**\n     * Scroll handler for the default scroll behavior of the top app bar.\n     * @override\n     */\n    MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {\n        var currentScrollPosition = Math.max(this.adapter.getViewportScrollY(), 0);\n        var diff = currentScrollPosition - this.lastScrollPosition_;\n        this.lastScrollPosition_ = currentScrollPosition;\n        // If the window is being resized the lastScrollPosition_ needs to be updated but the\n        // current scroll of the top app bar should stay in the same position.\n        if (!this.isCurrentlyBeingResized_) {\n            this.currentAppBarOffsetTop_ -= diff;\n            if (this.currentAppBarOffsetTop_ > 0) {\n                this.currentAppBarOffsetTop_ = 0;\n            }\n            else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {\n                this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;\n            }\n            this.moveTopAppBar_();\n        }\n    };\n    /**\n     * Top app bar resize handler that throttle/debounce functions that execute updates.\n     * @override\n     */\n    MDCTopAppBarFoundation.prototype.handleWindowResize = function () {\n        var _this = this;\n        // Throttle resize events 10 p/s\n        if (!this.resizeThrottleId_) {\n            this.resizeThrottleId_ = setTimeout(function () {\n                _this.resizeThrottleId_ = INITIAL_VALUE;\n                _this.throttledResizeHandler_();\n            }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n        }\n        this.isCurrentlyBeingResized_ = true;\n        if (this.resizeDebounceId_) {\n            clearTimeout(this.resizeDebounceId_);\n        }\n        this.resizeDebounceId_ = setTimeout(function () {\n            _this.handleTargetScroll();\n            _this.isCurrentlyBeingResized_ = false;\n            _this.resizeDebounceId_ = INITIAL_VALUE;\n        }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n    };\n    /**\n     * Function to determine if the DOM needs to update.\n     */\n    MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {\n        var offscreenBoundaryTop = -this.topAppBarHeight_;\n        var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;\n        var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;\n        var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;\n        // If it's partially showing, it can't be docked.\n        if (partiallyShowing) {\n            this.wasDocked_ = false;\n        }\n        else {\n            // Not previously docked and not partially showing, it's now docked.\n            if (!this.wasDocked_) {\n                this.wasDocked_ = true;\n                return true;\n            }\n            else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {\n                this.isDockedShowing_ = hasAnyPixelsOnscreen;\n                return true;\n            }\n        }\n        return partiallyShowing;\n    };\n    /**\n     * Function to move the top app bar if needed.\n     */\n    MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {\n        if (this.checkForUpdate_()) {\n            // Once the top app bar is fully hidden we use the max potential top app bar height as our offset\n            // so the top app bar doesn't show if the window resizes and the new height > the old height.\n            var offset = this.currentAppBarOffsetTop_;\n            if (Math.abs(offset) >= this.topAppBarHeight_) {\n                offset = -numbers.MAX_TOP_APP_BAR_HEIGHT;\n            }\n            this.adapter.setStyle('top', offset + 'px');\n        }\n    };\n    /**\n     * Throttled function that updates the top app bar scrolled values if the\n     * top app bar height changes.\n     */\n    MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {\n        var currentHeight = this.adapter.getTopAppBarHeight();\n        if (this.topAppBarHeight_ !== currentHeight) {\n            this.wasDocked_ = false;\n            // Since the top app bar has a different height depending on the screen width, this\n            // will ensure that the top app bar remains in the correct location if\n            // completely hidden and a resize makes the top app bar a different height.\n            this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;\n            this.topAppBarHeight_ = currentHeight;\n        }\n        this.handleTargetScroll();\n    };\n    return MDCTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation));\nexport { MDCTopAppBarFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCTopAppBarFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}