{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCIconButtonToggleFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCIconButtonToggleFoundation, _super);\n\n  function MDCIconButtonToggleFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation.defaultAdapter), adapter)) || this;\n    /**\n     * Whether the icon button has an aria label that changes depending on\n     * toggled state.\n     */\n\n\n    _this.hasToggledAriaLabel = false;\n    return _this;\n  }\n\n  Object.defineProperty(MDCIconButtonToggleFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCIconButtonToggleFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCIconButtonToggleFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        notifyChange: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        getAttr: function () {\n          return null;\n        },\n        setAttr: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCIconButtonToggleFoundation.prototype.init = function () {\n    var ariaLabelOn = this.adapter.getAttr(strings.DATA_ARIA_LABEL_ON);\n    var ariaLabelOff = this.adapter.getAttr(strings.DATA_ARIA_LABEL_OFF);\n\n    if (ariaLabelOn && ariaLabelOff) {\n      if (this.adapter.getAttr(strings.ARIA_PRESSED) !== null) {\n        throw new Error('MDCIconButtonToggleFoundation: Button should not set ' + '`aria-pressed` if it has a toggled aria label.');\n      }\n\n      this.hasToggledAriaLabel = true;\n    } else {\n      this.adapter.setAttr(strings.ARIA_PRESSED, String(this.isOn()));\n    }\n  };\n\n  MDCIconButtonToggleFoundation.prototype.handleClick = function () {\n    this.toggle();\n    this.adapter.notifyChange({\n      isOn: this.isOn()\n    });\n  };\n\n  MDCIconButtonToggleFoundation.prototype.isOn = function () {\n    return this.adapter.hasClass(cssClasses.ICON_BUTTON_ON);\n  };\n\n  MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {\n    if (isOn === void 0) {\n      isOn = !this.isOn();\n    } // Toggle UI based on state.\n\n\n    if (isOn) {\n      this.adapter.addClass(cssClasses.ICON_BUTTON_ON);\n    } else {\n      this.adapter.removeClass(cssClasses.ICON_BUTTON_ON);\n    } // Toggle aria attributes based on state.\n\n\n    if (this.hasToggledAriaLabel) {\n      var ariaLabel = isOn ? this.adapter.getAttr(strings.DATA_ARIA_LABEL_ON) : this.adapter.getAttr(strings.DATA_ARIA_LABEL_OFF);\n      this.adapter.setAttr(strings.ARIA_LABEL, ariaLabel || '');\n    } else {\n      this.adapter.setAttr(strings.ARIA_PRESSED, \"\" + isOn);\n    }\n  };\n\n  return MDCIconButtonToggleFoundation;\n}(MDCFoundation);\n\nexport { MDCIconButtonToggleFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCIconButtonToggleFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCIconButtonToggleFoundation = /** @class */ (function (_super) {\n    __extends(MDCIconButtonToggleFoundation, _super);\n    function MDCIconButtonToggleFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation.defaultAdapter), adapter)) || this;\n        /**\n         * Whether the icon button has an aria label that changes depending on\n         * toggled state.\n         */\n        _this.hasToggledAriaLabel = false;\n        return _this;\n    }\n    Object.defineProperty(MDCIconButtonToggleFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCIconButtonToggleFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCIconButtonToggleFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                notifyChange: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                getAttr: function () { return null; },\n                setAttr: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCIconButtonToggleFoundation.prototype.init = function () {\n        var ariaLabelOn = this.adapter.getAttr(strings.DATA_ARIA_LABEL_ON);\n        var ariaLabelOff = this.adapter.getAttr(strings.DATA_ARIA_LABEL_OFF);\n        if (ariaLabelOn && ariaLabelOff) {\n            if (this.adapter.getAttr(strings.ARIA_PRESSED) !== null) {\n                throw new Error('MDCIconButtonToggleFoundation: Button should not set ' +\n                    '`aria-pressed` if it has a toggled aria label.');\n            }\n            this.hasToggledAriaLabel = true;\n        }\n        else {\n            this.adapter.setAttr(strings.ARIA_PRESSED, String(this.isOn()));\n        }\n    };\n    MDCIconButtonToggleFoundation.prototype.handleClick = function () {\n        this.toggle();\n        this.adapter.notifyChange({ isOn: this.isOn() });\n    };\n    MDCIconButtonToggleFoundation.prototype.isOn = function () {\n        return this.adapter.hasClass(cssClasses.ICON_BUTTON_ON);\n    };\n    MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {\n        if (isOn === void 0) { isOn = !this.isOn(); }\n        // Toggle UI based on state.\n        if (isOn) {\n            this.adapter.addClass(cssClasses.ICON_BUTTON_ON);\n        }\n        else {\n            this.adapter.removeClass(cssClasses.ICON_BUTTON_ON);\n        }\n        // Toggle aria attributes based on state.\n        if (this.hasToggledAriaLabel) {\n            var ariaLabel = isOn ?\n                this.adapter.getAttr(strings.DATA_ARIA_LABEL_ON) :\n                this.adapter.getAttr(strings.DATA_ARIA_LABEL_OFF);\n            this.adapter.setAttr(strings.ARIA_LABEL, ariaLabel || '');\n        }\n        else {\n            this.adapter.setAttr(strings.ARIA_PRESSED, \"\" + isOn);\n        }\n    };\n    return MDCIconButtonToggleFoundation;\n}(MDCFoundation));\nexport { MDCIconButtonToggleFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCIconButtonToggleFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}