{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCSelectHelperTextFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCSelectHelperTextFoundation, _super);\n\n  function MDCSelectHelperTextFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;\n  }\n\n  Object.defineProperty(MDCSelectHelperTextFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectHelperTextFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectHelperTextFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        removeAttr: function () {\n          return undefined;\n        },\n        setContent: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Sets the content of the helper text field.\n   */\n\n  MDCSelectHelperTextFoundation.prototype.setContent = function (content) {\n    this.adapter.setContent(content);\n  };\n  /**\n   * Sets the helper text to act as a validation message.\n   * By default, validation messages are hidden when the select is valid and\n   * visible when the select is invalid.\n   *\n   * @param isValidation True to make the helper text act as an error validation\n   *     message.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {\n    if (isValidation) {\n      this.adapter.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    } else {\n      this.adapter.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    }\n  };\n  /**\n   * Sets the persistency of the validation helper text.\n   * This keeps the validation message visible even if the select is valid,\n   * though it will be displayed in the normal (grey) color.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function (isPersistent) {\n    if (isPersistent) {\n      this.adapter.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);\n    } else {\n      this.adapter.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);\n    }\n  };\n  /**\n   * Makes the helper text visible to screen readers.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {\n    this.adapter.removeAttr(strings.ARIA_HIDDEN);\n  };\n  /**\n   * When acting as a validation message, shows/hides the helper text and\n   * triggers alerts as necessary based on the select's validity.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {\n    var isValidationMsg = this.adapter.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n\n    if (!isValidationMsg) {\n      // Non-validating helper-text is always displayed and does not participate\n      // in validation logic.\n      return;\n    }\n\n    var isPersistentValidationMsg = this.adapter.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT); // Validating helper text is displayed if select is invalid, unless it is\n    // set as persistent, in which case it always displays.\n\n    var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;\n\n    if (msgShouldDisplay) {\n      this.showToScreenReader(); // In addition to displaying, also trigger an alert if the select\n      // has become invalid.\n\n      if (!selectIsValid) {\n        this.adapter.setAttr(strings.ROLE, 'alert');\n      } else {\n        this.adapter.removeAttr(strings.ROLE);\n      }\n\n      return;\n    } // Hide everything.\n\n\n    this.adapter.removeAttr(strings.ROLE);\n    this.hide();\n  };\n  /**\n   * Hides the help text from screen readers.\n   */\n\n\n  MDCSelectHelperTextFoundation.prototype.hide = function () {\n    this.adapter.setAttr(strings.ARIA_HIDDEN, 'true');\n  };\n\n  return MDCSelectHelperTextFoundation;\n}(MDCFoundation);\n\nexport { MDCSelectHelperTextFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCSelectHelperTextFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCSelectHelperTextFoundation = /** @class */ (function (_super) {\n    __extends(MDCSelectHelperTextFoundation, _super);\n    function MDCSelectHelperTextFoundation(adapter) {\n        return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;\n    }\n    Object.defineProperty(MDCSelectHelperTextFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectHelperTextFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSelectHelperTextFoundation, \"defaultAdapter\", {\n        /**\n         * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                setAttr: function () { return undefined; },\n                removeAttr: function () { return undefined; },\n                setContent: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the content of the helper text field.\n     */\n    MDCSelectHelperTextFoundation.prototype.setContent = function (content) {\n        this.adapter.setContent(content);\n    };\n    /**\n     * Sets the helper text to act as a validation message.\n     * By default, validation messages are hidden when the select is valid and\n     * visible when the select is invalid.\n     *\n     * @param isValidation True to make the helper text act as an error validation\n     *     message.\n     */\n    MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {\n        if (isValidation) {\n            this.adapter.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n        }\n        else {\n            this.adapter.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n        }\n    };\n    /**\n     * Sets the persistency of the validation helper text.\n     * This keeps the validation message visible even if the select is valid,\n     * though it will be displayed in the normal (grey) color.\n     */\n    MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function (isPersistent) {\n        if (isPersistent) {\n            this.adapter.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);\n        }\n        else {\n            this.adapter.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);\n        }\n    };\n    /**\n     * Makes the helper text visible to screen readers.\n     */\n    MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {\n        this.adapter.removeAttr(strings.ARIA_HIDDEN);\n    };\n    /**\n     * When acting as a validation message, shows/hides the helper text and\n     * triggers alerts as necessary based on the select's validity.\n     */\n    MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {\n        var isValidationMsg = this.adapter.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n        if (!isValidationMsg) {\n            // Non-validating helper-text is always displayed and does not participate\n            // in validation logic.\n            return;\n        }\n        var isPersistentValidationMsg = this.adapter.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);\n        // Validating helper text is displayed if select is invalid, unless it is\n        // set as persistent, in which case it always displays.\n        var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;\n        if (msgShouldDisplay) {\n            this.showToScreenReader();\n            // In addition to displaying, also trigger an alert if the select\n            // has become invalid.\n            if (!selectIsValid) {\n                this.adapter.setAttr(strings.ROLE, 'alert');\n            }\n            else {\n                this.adapter.removeAttr(strings.ROLE);\n            }\n            return;\n        }\n        // Hide everything.\n        this.adapter.removeAttr(strings.ROLE);\n        this.hide();\n    };\n    /**\n     * Hides the help text from screen readers.\n     */\n    MDCSelectHelperTextFoundation.prototype.hide = function () {\n        this.adapter.setAttr(strings.ARIA_HIDDEN, 'true');\n    };\n    return MDCSelectHelperTextFoundation;\n}(MDCFoundation));\nexport { MDCSelectHelperTextFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCSelectHelperTextFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}