{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, SortValue, strings } from './constants';\n/**\n * The Foundation of data table component containing pure business logic, any\n * logic requiring DOM manipulation are delegated to adapter methods.\n */\n\nvar MDCDataTableFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCDataTableFoundation, _super);\n\n  function MDCDataTableFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCDataTableFoundation.defaultAdapter), adapter)) || this;\n  }\n\n  Object.defineProperty(MDCDataTableFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        addClassAtRowIndex: function () {\n          return undefined;\n        },\n        getAttributeByHeaderCellIndex: function () {\n          return '';\n        },\n        getHeaderCellCount: function () {\n          return 0;\n        },\n        getHeaderCellElements: function () {\n          return [];\n        },\n        getRowCount: function () {\n          return 0;\n        },\n        getRowElements: function () {\n          return [];\n        },\n        getRowIdAtIndex: function () {\n          return '';\n        },\n        getRowIndexByChildElement: function () {\n          return 0;\n        },\n        getSelectedRowCount: function () {\n          return 0;\n        },\n        getTableBodyHeight: function () {\n          return '';\n        },\n        getTableHeaderHeight: function () {\n          return '';\n        },\n        isCheckboxAtRowIndexChecked: function () {\n          return false;\n        },\n        isHeaderRowCheckboxChecked: function () {\n          return false;\n        },\n        isRowsSelectable: function () {\n          return false;\n        },\n        notifyRowSelectionChanged: function () {\n          return undefined;\n        },\n        notifySelectedAll: function () {\n          return undefined;\n        },\n        notifySortAction: function () {\n          return undefined;\n        },\n        notifyUnselectedAll: function () {\n          return undefined;\n        },\n        registerHeaderRowCheckbox: function () {\n          return undefined;\n        },\n        registerRowCheckboxes: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        removeClassAtRowIndex: function () {\n          return undefined;\n        },\n        removeClassNameByHeaderCellIndex: function () {\n          return undefined;\n        },\n        setAttributeAtRowIndex: function () {\n          return undefined;\n        },\n        setAttributeByHeaderCellIndex: function () {\n          return undefined;\n        },\n        setClassNameByHeaderCellIndex: function () {\n          return undefined;\n        },\n        setHeaderRowCheckboxChecked: function () {\n          return undefined;\n        },\n        setHeaderRowCheckboxIndeterminate: function () {\n          return undefined;\n        },\n        setProgressIndicatorStyles: function () {\n          return undefined;\n        },\n        setRowCheckboxCheckedAtIndex: function () {\n          return undefined;\n        },\n        setSortStatusLabelByHeaderCellIndex: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is synchronous.\n   */\n\n  MDCDataTableFoundation.prototype.layout = function () {\n    if (this.adapter.isRowsSelectable()) {\n      this.adapter.registerHeaderRowCheckbox();\n      this.adapter.registerRowCheckboxes();\n      this.setHeaderRowCheckboxState();\n    }\n  };\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is asynchronous.\n   */\n\n\n  MDCDataTableFoundation.prototype.layoutAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.adapter.isRowsSelectable()) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.adapter.registerHeaderRowCheckbox()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.registerRowCheckboxes()];\n\n          case 2:\n            _a.sent();\n\n            this.setHeaderRowCheckboxState();\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @return Returns array of row elements.\n   */\n\n\n  MDCDataTableFoundation.prototype.getRows = function () {\n    return this.adapter.getRowElements();\n  };\n  /**\n   * @return Array of header cell elements.\n   */\n\n\n  MDCDataTableFoundation.prototype.getHeaderCells = function () {\n    return this.adapter.getHeaderCellElements();\n  };\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n\n\n  MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {\n    for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n      var rowId = this.adapter.getRowIdAtIndex(rowIndex);\n      var isSelected = false;\n\n      if (rowId && rowIds.indexOf(rowId) >= 0) {\n        isSelected = true;\n      }\n\n      this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n      this.selectRowAtIndex(rowIndex, isSelected);\n    }\n\n    this.setHeaderRowCheckboxState();\n  };\n  /**\n   * @return Returns array of all row ids.\n   */\n\n\n  MDCDataTableFoundation.prototype.getRowIds = function () {\n    var rowIds = [];\n\n    for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n      rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));\n    }\n\n    return rowIds;\n  };\n  /**\n   * @return Returns array of selected row ids.\n   */\n\n\n  MDCDataTableFoundation.prototype.getSelectedRowIds = function () {\n    var selectedRowIds = [];\n\n    for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n      if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {\n        selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));\n      }\n    }\n\n    return selectedRowIds;\n  };\n  /**\n   * Handles header row checkbox change event.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {\n    var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();\n\n    for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n      this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n      this.selectRowAtIndex(rowIndex, isHeaderChecked);\n    }\n\n    if (isHeaderChecked) {\n      this.adapter.notifySelectedAll();\n    } else {\n      this.adapter.notifyUnselectedAll();\n    }\n  };\n  /**\n   * Handles change event originated from row checkboxes.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {\n    var rowIndex = this.adapter.getRowIndexByChildElement(event.target);\n\n    if (rowIndex === -1) {\n      return;\n    }\n\n    var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);\n    this.selectRowAtIndex(rowIndex, selected);\n    this.setHeaderRowCheckboxState();\n    var rowId = this.adapter.getRowIdAtIndex(rowIndex);\n    this.adapter.notifyRowSelectionChanged({\n      rowId: rowId,\n      rowIndex: rowIndex,\n      selected: selected\n    });\n  };\n  /**\n   * Handles sort action on sortable header cell.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleSortAction = function (eventData) {\n    var columnId = eventData.columnId,\n        columnIndex = eventData.columnIndex,\n        headerCell = eventData.headerCell; // Reset sort attributes / classes on other header cells.\n\n    for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {\n      if (index === columnIndex) {\n        continue;\n      }\n\n      this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses.HEADER_CELL_SORTED);\n      this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n      this.adapter.setAttributeByHeaderCellIndex(index, strings.ARIA_SORT, SortValue.NONE);\n      this.adapter.setSortStatusLabelByHeaderCellIndex(index, SortValue.NONE);\n    } // Set appropriate sort attributes / classes on target header cell.\n\n\n    this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses.HEADER_CELL_SORTED);\n    var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT);\n    var sortValue = SortValue.NONE; // Set to descending if sorted on ascending order.\n\n    if (currentSortValue === SortValue.ASCENDING) {\n      this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n      this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT, SortValue.DESCENDING);\n      sortValue = SortValue.DESCENDING; // Set to ascending if sorted on descending order.\n    } else if (currentSortValue === SortValue.DESCENDING) {\n      this.adapter.removeClassNameByHeaderCellIndex(columnIndex, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n      this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT, SortValue.ASCENDING);\n      sortValue = SortValue.ASCENDING;\n    } else {\n      // Set to ascending by default when not sorted.\n      this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT, SortValue.ASCENDING);\n      sortValue = SortValue.ASCENDING;\n    }\n\n    this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);\n    this.adapter.notifySortAction({\n      columnId: columnId,\n      columnIndex: columnIndex,\n      headerCell: headerCell,\n      sortValue: sortValue\n    });\n  };\n  /**\n   * Shows progress indicator blocking only the table body content when in\n   * loading state.\n   */\n\n\n  MDCDataTableFoundation.prototype.showProgress = function () {\n    var height = this.adapter.getTableBodyHeight();\n    var top = this.adapter.getTableHeaderHeight();\n    this.adapter.setProgressIndicatorStyles({\n      height: height,\n      top: top\n    });\n    this.adapter.addClass(cssClasses.IN_PROGRESS);\n  };\n  /**\n   * Hides progress indicator when data table is finished loading.\n   */\n\n\n  MDCDataTableFoundation.prototype.hideProgress = function () {\n    this.adapter.removeClass(cssClasses.IN_PROGRESS);\n  };\n  /**\n   * Updates header row checkbox state based on number of rows selected.\n   */\n\n\n  MDCDataTableFoundation.prototype.setHeaderRowCheckboxState = function () {\n    if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {\n      this.adapter.setHeaderRowCheckboxChecked(true);\n      this.adapter.setHeaderRowCheckboxIndeterminate(false);\n    } else if (this.adapter.getSelectedRowCount() === 0) {\n      this.adapter.setHeaderRowCheckboxIndeterminate(false);\n      this.adapter.setHeaderRowCheckboxChecked(false);\n    } else {\n      this.adapter.setHeaderRowCheckboxIndeterminate(true);\n      this.adapter.setHeaderRowCheckboxChecked(false);\n    }\n  };\n  /**\n   * Sets the attributes of row element based on selection state.\n   */\n\n\n  MDCDataTableFoundation.prototype.selectRowAtIndex = function (rowIndex, selected) {\n    if (selected) {\n      this.adapter.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'true');\n    } else {\n      this.adapter.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'false');\n    }\n  };\n\n  return MDCDataTableFoundation;\n}(MDCFoundation);\n\nexport { MDCDataTableFoundation };","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, SortValue, strings } from './constants';\n/**\n * The Foundation of data table component containing pure business logic, any\n * logic requiring DOM manipulation are delegated to adapter methods.\n */\nvar MDCDataTableFoundation = /** @class */ (function (_super) {\n    __extends(MDCDataTableFoundation, _super);\n    function MDCDataTableFoundation(adapter) {\n        return _super.call(this, __assign(__assign({}, MDCDataTableFoundation.defaultAdapter), adapter)) || this;\n    }\n    Object.defineProperty(MDCDataTableFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                addClassAtRowIndex: function () { return undefined; },\n                getAttributeByHeaderCellIndex: function () { return ''; },\n                getHeaderCellCount: function () { return 0; },\n                getHeaderCellElements: function () { return []; },\n                getRowCount: function () { return 0; },\n                getRowElements: function () { return []; },\n                getRowIdAtIndex: function () { return ''; },\n                getRowIndexByChildElement: function () { return 0; },\n                getSelectedRowCount: function () { return 0; },\n                getTableBodyHeight: function () { return ''; },\n                getTableHeaderHeight: function () { return ''; },\n                isCheckboxAtRowIndexChecked: function () { return false; },\n                isHeaderRowCheckboxChecked: function () { return false; },\n                isRowsSelectable: function () { return false; },\n                notifyRowSelectionChanged: function () { return undefined; },\n                notifySelectedAll: function () { return undefined; },\n                notifySortAction: function () { return undefined; },\n                notifyUnselectedAll: function () { return undefined; },\n                registerHeaderRowCheckbox: function () { return undefined; },\n                registerRowCheckboxes: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                removeClassAtRowIndex: function () { return undefined; },\n                removeClassNameByHeaderCellIndex: function () { return undefined; },\n                setAttributeAtRowIndex: function () { return undefined; },\n                setAttributeByHeaderCellIndex: function () { return undefined; },\n                setClassNameByHeaderCellIndex: function () { return undefined; },\n                setHeaderRowCheckboxChecked: function () { return undefined; },\n                setHeaderRowCheckboxIndeterminate: function () { return undefined; },\n                setProgressIndicatorStyles: function () { return undefined; },\n                setRowCheckboxCheckedAtIndex: function () { return undefined; },\n                setSortStatusLabelByHeaderCellIndex: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     * Use this if registering checkbox is synchronous.\n     */\n    MDCDataTableFoundation.prototype.layout = function () {\n        if (this.adapter.isRowsSelectable()) {\n            this.adapter.registerHeaderRowCheckbox();\n            this.adapter.registerRowCheckboxes();\n            this.setHeaderRowCheckboxState();\n        }\n    };\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     * Use this if registering checkbox is asynchronous.\n     */\n    MDCDataTableFoundation.prototype.layoutAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.adapter.isRowsSelectable()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.adapter.registerHeaderRowCheckbox()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.adapter.registerRowCheckboxes()];\n                    case 2:\n                        _a.sent();\n                        this.setHeaderRowCheckboxState();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @return Returns array of row elements.\n     */\n    MDCDataTableFoundation.prototype.getRows = function () {\n        return this.adapter.getRowElements();\n    };\n    /**\n     * @return Array of header cell elements.\n     */\n    MDCDataTableFoundation.prototype.getHeaderCells = function () {\n        return this.adapter.getHeaderCellElements();\n    };\n    /**\n     * Sets selected row ids. Overwrites previously selected rows.\n     * @param rowIds Array of row ids that needs to be selected.\n     */\n    MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {\n        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n            var rowId = this.adapter.getRowIdAtIndex(rowIndex);\n            var isSelected = false;\n            if (rowId && rowIds.indexOf(rowId) >= 0) {\n                isSelected = true;\n            }\n            this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n            this.selectRowAtIndex(rowIndex, isSelected);\n        }\n        this.setHeaderRowCheckboxState();\n    };\n    /**\n     * @return Returns array of all row ids.\n     */\n    MDCDataTableFoundation.prototype.getRowIds = function () {\n        var rowIds = [];\n        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n            rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));\n        }\n        return rowIds;\n    };\n    /**\n     * @return Returns array of selected row ids.\n     */\n    MDCDataTableFoundation.prototype.getSelectedRowIds = function () {\n        var selectedRowIds = [];\n        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n            if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {\n                selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));\n            }\n        }\n        return selectedRowIds;\n    };\n    /**\n     * Handles header row checkbox change event.\n     */\n    MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {\n        var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();\n        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {\n            this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n            this.selectRowAtIndex(rowIndex, isHeaderChecked);\n        }\n        if (isHeaderChecked) {\n            this.adapter.notifySelectedAll();\n        }\n        else {\n            this.adapter.notifyUnselectedAll();\n        }\n    };\n    /**\n     * Handles change event originated from row checkboxes.\n     */\n    MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {\n        var rowIndex = this.adapter.getRowIndexByChildElement(event.target);\n        if (rowIndex === -1) {\n            return;\n        }\n        var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);\n        this.selectRowAtIndex(rowIndex, selected);\n        this.setHeaderRowCheckboxState();\n        var rowId = this.adapter.getRowIdAtIndex(rowIndex);\n        this.adapter.notifyRowSelectionChanged({ rowId: rowId, rowIndex: rowIndex, selected: selected });\n    };\n    /**\n     * Handles sort action on sortable header cell.\n     */\n    MDCDataTableFoundation.prototype.handleSortAction = function (eventData) {\n        var columnId = eventData.columnId, columnIndex = eventData.columnIndex, headerCell = eventData.headerCell;\n        // Reset sort attributes / classes on other header cells.\n        for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {\n            if (index === columnIndex) {\n                continue;\n            }\n            this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses.HEADER_CELL_SORTED);\n            this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n            this.adapter.setAttributeByHeaderCellIndex(index, strings.ARIA_SORT, SortValue.NONE);\n            this.adapter.setSortStatusLabelByHeaderCellIndex(index, SortValue.NONE);\n        }\n        // Set appropriate sort attributes / classes on target header cell.\n        this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses.HEADER_CELL_SORTED);\n        var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT);\n        var sortValue = SortValue.NONE;\n        // Set to descending if sorted on ascending order.\n        if (currentSortValue === SortValue.ASCENDING) {\n            this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT, SortValue.DESCENDING);\n            sortValue = SortValue.DESCENDING;\n            // Set to ascending if sorted on descending order.\n        }\n        else if (currentSortValue === SortValue.DESCENDING) {\n            this.adapter.removeClassNameByHeaderCellIndex(columnIndex, cssClasses.HEADER_CELL_SORTED_DESCENDING);\n            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT, SortValue.ASCENDING);\n            sortValue = SortValue.ASCENDING;\n        }\n        else {\n            // Set to ascending by default when not sorted.\n            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings.ARIA_SORT, SortValue.ASCENDING);\n            sortValue = SortValue.ASCENDING;\n        }\n        this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);\n        this.adapter.notifySortAction({\n            columnId: columnId,\n            columnIndex: columnIndex,\n            headerCell: headerCell,\n            sortValue: sortValue,\n        });\n    };\n    /**\n     * Shows progress indicator blocking only the table body content when in\n     * loading state.\n     */\n    MDCDataTableFoundation.prototype.showProgress = function () {\n        var height = this.adapter.getTableBodyHeight();\n        var top = this.adapter.getTableHeaderHeight();\n        this.adapter.setProgressIndicatorStyles({\n            height: height,\n            top: top,\n        });\n        this.adapter.addClass(cssClasses.IN_PROGRESS);\n    };\n    /**\n     * Hides progress indicator when data table is finished loading.\n     */\n    MDCDataTableFoundation.prototype.hideProgress = function () {\n        this.adapter.removeClass(cssClasses.IN_PROGRESS);\n    };\n    /**\n     * Updates header row checkbox state based on number of rows selected.\n     */\n    MDCDataTableFoundation.prototype.setHeaderRowCheckboxState = function () {\n        if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {\n            this.adapter.setHeaderRowCheckboxChecked(true);\n            this.adapter.setHeaderRowCheckboxIndeterminate(false);\n        }\n        else if (this.adapter.getSelectedRowCount() === 0) {\n            this.adapter.setHeaderRowCheckboxIndeterminate(false);\n            this.adapter.setHeaderRowCheckboxChecked(false);\n        }\n        else {\n            this.adapter.setHeaderRowCheckboxIndeterminate(true);\n            this.adapter.setHeaderRowCheckboxChecked(false);\n        }\n    };\n    /**\n     * Sets the attributes of row element based on selection state.\n     */\n    MDCDataTableFoundation.prototype.selectRowAtIndex = function (rowIndex, selected) {\n        if (selected) {\n            this.adapter.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n            this.adapter.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'true');\n        }\n        else {\n            this.adapter.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n            this.adapter.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'false');\n        }\n    };\n    return MDCDataTableFoundation;\n}(MDCFoundation));\nexport { MDCDataTableFoundation };\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}