{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { FocusTrap } from '@material/dom/focus-trap';\nimport { MDCList } from '@material/list/component';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCDismissibleDrawerFoundation } from './dismissible/foundation';\nimport { MDCModalDrawerFoundation } from './modal/foundation';\nimport * as util from './util';\nvar cssClasses = MDCDismissibleDrawerFoundation.cssClasses,\n    strings = MDCDismissibleDrawerFoundation.strings;\n/**\n * @events `MDCDrawer:closed {}` Emits when the navigation drawer has closed.\n * @events `MDCDrawer:opened {}` Emits when the navigation drawer has opened.\n */\n\nvar MDCDrawer =\n/** @class */\nfunction (_super) {\n  __extends(MDCDrawer, _super);\n\n  function MDCDrawer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCDrawer.attachTo = function (root) {\n    return new MDCDrawer(root);\n  };\n\n  Object.defineProperty(MDCDrawer.prototype, \"open\", {\n    /**\n     * @return boolean Proxies to the foundation's `open`/`close` methods.\n     * Also returns true if drawer is in the open position.\n     */\n    get: function () {\n      return this.foundation.isOpen();\n    },\n\n    /**\n     * Toggles the drawer open and closed.\n     */\n    set: function (isOpen) {\n      if (isOpen) {\n        this.foundation.open();\n      } else {\n        this.foundation.close();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDrawer.prototype, \"list\", {\n    get: function () {\n      return this.list_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCDrawer.prototype.initialize = function (focusTrapFactory, listFactory) {\n    if (focusTrapFactory === void 0) {\n      focusTrapFactory = function (el) {\n        return new FocusTrap(el);\n      };\n    }\n\n    if (listFactory === void 0) {\n      listFactory = function (el) {\n        return new MDCList(el);\n      };\n    }\n\n    var listEl = this.root.querySelector(\".\" + MDCListFoundation.cssClasses.ROOT);\n\n    if (listEl) {\n      this.list_ = listFactory(listEl);\n      this.list_.wrapFocus = true;\n    }\n\n    this.focusTrapFactory_ = focusTrapFactory;\n  };\n\n  MDCDrawer.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    var MODAL = cssClasses.MODAL;\n    var SCRIM_SELECTOR = strings.SCRIM_SELECTOR;\n    this.scrim_ = this.root.parentNode.querySelector(SCRIM_SELECTOR);\n\n    if (this.scrim_ && this.root.classList.contains(MODAL)) {\n      this.handleScrimClick_ = function () {\n        return _this.foundation.handleScrimClick();\n      };\n\n      this.scrim_.addEventListener('click', this.handleScrimClick_);\n      this.focusTrap_ = util.createFocusTrapInstance(this.root, this.focusTrapFactory_);\n    }\n\n    this.handleKeydown_ = function (evt) {\n      return _this.foundation.handleKeydown(evt);\n    };\n\n    this.handleTransitionEnd_ = function (evt) {\n      return _this.foundation.handleTransitionEnd(evt);\n    };\n\n    this.listen('keydown', this.handleKeydown_);\n    this.listen('transitionend', this.handleTransitionEnd_);\n  };\n\n  MDCDrawer.prototype.destroy = function () {\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten('transitionend', this.handleTransitionEnd_);\n\n    if (this.list_) {\n      this.list_.destroy();\n    }\n\n    var MODAL = cssClasses.MODAL;\n\n    if (this.scrim_ && this.handleScrimClick_ && this.root.classList.contains(MODAL)) {\n      this.scrim_.removeEventListener('click', this.handleScrimClick_); // Ensure drawer is closed to hide scrim and release focus\n\n      this.open = false;\n    }\n  };\n\n  MDCDrawer.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      hasClass: function (className) {\n        return _this.root.classList.contains(className);\n      },\n      elementHasClass: function (element, className) {\n        return element.classList.contains(className);\n      },\n      saveFocus: function () {\n        return _this.previousFocus_ = document.activeElement;\n      },\n      restoreFocus: function () {\n        var previousFocus = _this.previousFocus_;\n\n        if (previousFocus && previousFocus.focus && _this.root.contains(document.activeElement)) {\n          previousFocus.focus();\n        }\n      },\n      focusActiveNavigationItem: function () {\n        var activeNavItemEl = _this.root.querySelector(\".\" + MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n\n        if (activeNavItemEl) {\n          activeNavItemEl.focus();\n        }\n      },\n      notifyClose: function () {\n        return _this.emit(strings.CLOSE_EVENT, {}, true\n        /* shouldBubble */\n        );\n      },\n      notifyOpen: function () {\n        return _this.emit(strings.OPEN_EVENT, {}, true\n        /* shouldBubble */\n        );\n      },\n      trapFocus: function () {\n        return _this.focusTrap_.trapFocus();\n      },\n      releaseFocus: function () {\n        return _this.focusTrap_.releaseFocus();\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    var DISMISSIBLE = cssClasses.DISMISSIBLE,\n        MODAL = cssClasses.MODAL;\n\n    if (this.root.classList.contains(DISMISSIBLE)) {\n      return new MDCDismissibleDrawerFoundation(adapter);\n    } else if (this.root.classList.contains(MODAL)) {\n      return new MDCModalDrawerFoundation(adapter);\n    } else {\n      throw new Error(\"MDCDrawer: Failed to instantiate component. Supported variants are \" + DISMISSIBLE + \" and \" + MODAL + \".\");\n    }\n  };\n\n  return MDCDrawer;\n}(MDCComponent);\n\nexport { MDCDrawer };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQ,YAAR,QAA2B,0BAA3B;AAEA,SAAQ,SAAR,QAAwB,0BAAxB;AACA,SAAQ,OAAR,QAAsC,0BAAtC;AACA,SAAQ,iBAAR,QAAgC,2BAAhC;AAEA,SAAQ,8BAAR,QAA6C,0BAA7C;AACA,SAAQ,wBAAR,QAAuC,oBAAvC;AACA,OAAO,KAAK,IAAZ,MAAsB,QAAtB;AAGO,IAAA,UAAA,GAAA,8BAAA,CAAA,UAAA;AAAA,IAAY,OAAA,GAAA,8BAAA,CAAA,OAAZ;AAEP;;;;;AAIA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAA/B,WAAA,SAAA,GAAA;;AAwIC;;AAvIQ,EAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA6B;AAC3B,WAAO,IAAI,SAAJ,CAAc,IAAd,CAAP;AACD,GAFM;;AAQP,EAAA,MAAA,CAAA,cAAA,CAAI,SAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAJR;;;;SAIA,YAAA;AACE,aAAO,KAAK,UAAL,CAAgB,MAAhB,EAAP;AACD,KAFO;;AAIR;;;SAGA,UAAS,MAAT,EAAwB;AACtB,UAAI,MAAJ,EAAY;AACV,aAAK,UAAL,CAAgB,IAAhB;AACD,OAFD,MAEO;AACL,aAAK,UAAL,CAAgB,KAAhB;AACD;AACF,KAbO;oBAAA;;AAAA,GAAR;AA0BA,EAAA,MAAA,CAAA,cAAA,CAAI,SAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;SAAR,YAAA;AACE,aAAO,KAAK,KAAZ;AACD,KAFO;oBAAA;;AAAA,GAAR;;AAIA,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UACI,gBADJ,EAEI,WAFJ,EAEyD;AADrD,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,UAA+C,EAA/C,EAAiD;AAAK,eAAA,IAAI,SAAJ,CAAA,EAAA,CAAA;AAAiB,OAAvE;AAAuE;;AACvE,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,UAA+B,EAA/B,EAAiC;AAAK,eAAA,IAAI,OAAJ,CAAA,EAAA,CAAA;AAAe,OAArD;AAAqD;;AAEvD,QAAM,MAAM,GACR,KAAK,IAAL,CAAU,aAAV,CAAwB,MAAI,iBAAiB,CAAC,UAAlB,CAA6B,IAAzD,CADJ;;AAEA,QAAI,MAAJ,EAAY;AACV,WAAK,KAAL,GAAa,WAAW,CAAC,MAAD,CAAxB;AACA,WAAK,KAAL,CAAW,SAAX,GAAuB,IAAvB;AACD;;AACD,SAAK,iBAAL,GAAyB,gBAAzB;AACD,GAXD;;AAaA,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACS,QAAA,KAAA,GAAA,UAAA,CAAA,KAAA;AACA,QAAA,cAAA,GAAA,OAAA,CAAA,cAAA;AAEP,SAAK,MAAL,GAAe,KAAK,IAAL,CAAU,UAAV,CACI,aADJ,CAC+B,cAD/B,CAAf;;AAGA,QAAI,KAAK,MAAL,IAAe,KAAK,IAAL,CAAU,SAAV,CAAoB,QAApB,CAA6B,KAA7B,CAAnB,EAAwD;AACtD,WAAK,iBAAL,GAAyB,YAAA;AACrB,eAAC,KAAI,CAAC,UAAL,CAA6C,gBAA7C,EAAD;AAAgE,OADpE;;AAEA,WAAK,MAAL,CAAY,gBAAZ,CAA6B,OAA7B,EAAsC,KAAK,iBAA3C;AACA,WAAK,UAAL,GAAkB,IAAI,CAAC,uBAAL,CACd,KAAK,IADS,EACY,KAAK,iBADjB,CAAlB;AAED;;AAED,SAAK,cAAL,GAAsB,UAAC,GAAD,EAAI;AAAK,aAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB,CAAA,GAAA,CAAA;AAAkC,KAAjE;;AACA,SAAK,oBAAL,GAA4B,UAAC,GAAD,EAAI;AAC5B,aAAA,KAAI,CAAC,UAAL,CAAgB,mBAAhB,CAAoC,GAApC,CAAA;AAAwC,KAD5C;;AAGA,SAAK,MAAL,CAAY,SAAZ,EAAuB,KAAK,cAA5B;AACA,SAAK,MAAL,CAAY,eAAZ,EAA6B,KAAK,oBAAlC;AACD,GArBD;;AAuBA,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,SAAd,EAAyB,KAAK,cAA9B;AACA,SAAK,QAAL,CAAc,eAAd,EAA+B,KAAK,oBAApC;;AAEA,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,KAAL,CAAW,OAAX;AACD;;AAEM,QAAA,KAAA,GAAA,UAAA,CAAA,KAAA;;AACP,QAAI,KAAK,MAAL,IAAe,KAAK,iBAApB,IACA,KAAK,IAAL,CAAU,SAAV,CAAoB,QAApB,CAA6B,KAA7B,CADJ,EACyC;AACvC,WAAK,MAAL,CAAY,mBAAZ,CAAgC,OAAhC,EAAyC,KAAK,iBAA9C,EADuC,CAEvC;;AACA,WAAK,IAAL,GAAY,KAAZ;AACD;AACF,GAfD;;AAiBA,EAAA,SAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;AACA;;;AACA,QAAM,OAAO,GAAqB;AAChC,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,GAApB,CAAA,SAAA,CAAA;AAAkC,OAD3B;AAEhC,MAAA,WAAW,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,MAApB,CAAA,SAAA,CAAA;AAAqC,OAFjC;AAGhC,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,QAApB,CAAA,SAAA,CAAA;AAAuC,OAHhC;AAIhC,MAAA,eAAe,EAAE,UAAC,OAAD,EAAU,SAAV,EAAmB;AAChC,eAAA,OAAO,CAAC,SAAR,CAAkB,QAAlB,CAA2B,SAA3B,CAAA;AAAqC,OALT;AAMhC,MAAA,SAAS,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,cAAL,GAAsB,QAAQ,CAA9B,aAAA;AAA4C,OAN7B;AAOhC,MAAA,YAAY,EAAE,YAAA;AACZ,YAAM,aAAa,GAAG,KAAI,CAAC,cAA3B;;AACA,YAAI,aAAa,IAAI,aAAa,CAAC,KAA/B,IACA,KAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,QAAQ,CAAC,aAA5B,CADJ,EACgD;AAC9C,UAAA,aAAa,CAAC,KAAd;AACD;AACF,OAb+B;AAchC,MAAA,yBAAyB,EAAE,YAAA;AACzB,YAAM,eAAe,GAAG,KAAI,CAAC,IAAL,CAAU,aAAV,CACpB,MAAI,iBAAiB,CAAC,UAAlB,CAA6B,yBADb,CAAxB;;AAEA,YAAI,eAAJ,EAAqB;AACnB,UAAA,eAAe,CAAC,KAAhB;AACD;AACF,OApB+B;AAqBhC,MAAA,WAAW,EAAE,YAAA;AACT,eAAA,KAAI,CAAC,IAAL,CAAU,OAAO,CAAC,WAAlB,EAA+B,EAA/B,EAAmC;AAAK;AAAxC,SAAA;AAA2D,OAtB/B;AAuBhC,MAAA,UAAU,EAAE,YAAA;AACR,eAAA,KAAI,CAAC,IAAL,CAAU,OAAO,CAAC,UAAlB,EAA8B,EAA9B,EAAkC;AAAK;AAAvC,SAAA;AAA0D,OAxB9B;AAyBhC,MAAA,SAAS,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,UAAL,CAAA,SAAA,EAAA;AAA4B,OAzBb;AA0BhC,MAAA,YAAY,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,UAAL,CAAA,YAAA,EAAA;AAA+B;AA1BnB,KAAlC,CAJF,CAgCE;;AAEO,QAAA,WAAA,GAAA,UAAA,CAAA,WAAA;AAAA,QAAa,KAAA,GAAA,UAAA,CAAA,KAAb;;AACP,QAAI,KAAK,IAAL,CAAU,SAAV,CAAoB,QAApB,CAA6B,WAA7B,CAAJ,EAA+C;AAC7C,aAAO,IAAI,8BAAJ,CAAmC,OAAnC,CAAP;AACD,KAFD,MAEO,IAAI,KAAK,IAAL,CAAU,SAAV,CAAoB,QAApB,CAA6B,KAA7B,CAAJ,EAAyC;AAC9C,aAAO,IAAI,wBAAJ,CAA6B,OAA7B,CAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAI,KAAJ,CACF,wEAAsE,WAAtE,GAAiF,OAAjF,GAAyF,KAAzF,GAA8F,GAD5F,CAAN;AAED;AACF,GA3CD;;AA4CF,SAAA,SAAA;AAAC,CAxID,CAA+B,YAA/B,CAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { FocusTrap } from '@material/dom/focus-trap';\nimport { MDCList } from '@material/list/component';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCDismissibleDrawerFoundation } from './dismissible/foundation';\nimport { MDCModalDrawerFoundation } from './modal/foundation';\nimport * as util from './util';\nvar cssClasses = MDCDismissibleDrawerFoundation.cssClasses, strings = MDCDismissibleDrawerFoundation.strings;\n/**\n * @events `MDCDrawer:closed {}` Emits when the navigation drawer has closed.\n * @events `MDCDrawer:opened {}` Emits when the navigation drawer has opened.\n */\nvar MDCDrawer = /** @class */ (function (_super) {\n    __extends(MDCDrawer, _super);\n    function MDCDrawer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCDrawer.attachTo = function (root) {\n        return new MDCDrawer(root);\n    };\n    Object.defineProperty(MDCDrawer.prototype, \"open\", {\n        /**\n         * @return boolean Proxies to the foundation's `open`/`close` methods.\n         * Also returns true if drawer is in the open position.\n         */\n        get: function () {\n            return this.foundation.isOpen();\n        },\n        /**\n         * Toggles the drawer open and closed.\n         */\n        set: function (isOpen) {\n            if (isOpen) {\n                this.foundation.open();\n            }\n            else {\n                this.foundation.close();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCDrawer.prototype, \"list\", {\n        get: function () {\n            return this.list_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCDrawer.prototype.initialize = function (focusTrapFactory, listFactory) {\n        if (focusTrapFactory === void 0) { focusTrapFactory = function (el) { return new FocusTrap(el); }; }\n        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }\n        var listEl = this.root.querySelector(\".\" + MDCListFoundation.cssClasses.ROOT);\n        if (listEl) {\n            this.list_ = listFactory(listEl);\n            this.list_.wrapFocus = true;\n        }\n        this.focusTrapFactory_ = focusTrapFactory;\n    };\n    MDCDrawer.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        var MODAL = cssClasses.MODAL;\n        var SCRIM_SELECTOR = strings.SCRIM_SELECTOR;\n        this.scrim_ = this.root.parentNode\n            .querySelector(SCRIM_SELECTOR);\n        if (this.scrim_ && this.root.classList.contains(MODAL)) {\n            this.handleScrimClick_ = function () {\n                return _this.foundation.handleScrimClick();\n            };\n            this.scrim_.addEventListener('click', this.handleScrimClick_);\n            this.focusTrap_ = util.createFocusTrapInstance(this.root, this.focusTrapFactory_);\n        }\n        this.handleKeydown_ = function (evt) { return _this.foundation.handleKeydown(evt); };\n        this.handleTransitionEnd_ = function (evt) {\n            return _this.foundation.handleTransitionEnd(evt);\n        };\n        this.listen('keydown', this.handleKeydown_);\n        this.listen('transitionend', this.handleTransitionEnd_);\n    };\n    MDCDrawer.prototype.destroy = function () {\n        this.unlisten('keydown', this.handleKeydown_);\n        this.unlisten('transitionend', this.handleTransitionEnd_);\n        if (this.list_) {\n            this.list_.destroy();\n        }\n        var MODAL = cssClasses.MODAL;\n        if (this.scrim_ && this.handleScrimClick_ &&\n            this.root.classList.contains(MODAL)) {\n            this.scrim_.removeEventListener('click', this.handleScrimClick_);\n            // Ensure drawer is closed to hide scrim and release focus\n            this.open = false;\n        }\n    };\n    MDCDrawer.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            elementHasClass: function (element, className) {\n                return element.classList.contains(className);\n            },\n            saveFocus: function () { return _this.previousFocus_ = document.activeElement; },\n            restoreFocus: function () {\n                var previousFocus = _this.previousFocus_;\n                if (previousFocus && previousFocus.focus &&\n                    _this.root.contains(document.activeElement)) {\n                    previousFocus.focus();\n                }\n            },\n            focusActiveNavigationItem: function () {\n                var activeNavItemEl = _this.root.querySelector(\".\" + MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n                if (activeNavItemEl) {\n                    activeNavItemEl.focus();\n                }\n            },\n            notifyClose: function () {\n                return _this.emit(strings.CLOSE_EVENT, {}, true /* shouldBubble */);\n            },\n            notifyOpen: function () {\n                return _this.emit(strings.OPEN_EVENT, {}, true /* shouldBubble */);\n            },\n            trapFocus: function () { return _this.focusTrap_.trapFocus(); },\n            releaseFocus: function () { return _this.focusTrap_.releaseFocus(); },\n        };\n        // tslint:enable:object-literal-sort-keys\n        var DISMISSIBLE = cssClasses.DISMISSIBLE, MODAL = cssClasses.MODAL;\n        if (this.root.classList.contains(DISMISSIBLE)) {\n            return new MDCDismissibleDrawerFoundation(adapter);\n        }\n        else if (this.root.classList.contains(MODAL)) {\n            return new MDCModalDrawerFoundation(adapter);\n        }\n        else {\n            throw new Error(\"MDCDrawer: Failed to instantiate component. Supported variants are \" + DISMISSIBLE + \" and \" + MODAL + \".\");\n        }\n    };\n    return MDCDrawer;\n}(MDCComponent));\nexport { MDCDrawer };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}