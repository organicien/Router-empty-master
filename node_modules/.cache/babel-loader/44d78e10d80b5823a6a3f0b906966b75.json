{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { normalizeKey } from '@material/dom/keyboard';\nimport { cssClasses, numbers, strings } from './constants';\nimport * as typeahead from './typeahead';\nimport { preventDefaultEvent } from './events';\n\nfunction isNumberArray(selectedIndex) {\n  return selectedIndex instanceof Array;\n}\n\nvar MDCListFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCListFoundation, _super);\n\n  function MDCListFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;\n\n    _this.wrapFocus_ = false;\n    _this.isVertical_ = true;\n    _this.isSingleSelectionList_ = false;\n    _this.selectedIndex_ = numbers.UNSET_INDEX;\n    _this.focusedItemIndex = numbers.UNSET_INDEX;\n    _this.useActivatedClass_ = false;\n    _this.ariaCurrentAttrValue_ = null;\n    _this.isCheckboxList_ = false;\n    _this.isRadioList_ = false;\n    _this.hasTypeahead = false; // Transiently holds current typeahead prefix from user.\n\n    _this.typeaheadState = typeahead.initState();\n    _this.sortedIndexByFirstChar = new Map();\n    return _this;\n  }\n\n  Object.defineProperty(MDCListFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClassForElementIndex: function () {\n          return undefined;\n        },\n        focusItemAtIndex: function () {\n          return undefined;\n        },\n        getAttributeForElementIndex: function () {\n          return null;\n        },\n        getFocusedElementIndex: function () {\n          return 0;\n        },\n        getListItemCount: function () {\n          return 0;\n        },\n        hasCheckboxAtIndex: function () {\n          return false;\n        },\n        hasRadioAtIndex: function () {\n          return false;\n        },\n        isCheckboxCheckedAtIndex: function () {\n          return false;\n        },\n        isFocusInsideList: function () {\n          return false;\n        },\n        isRootFocused: function () {\n          return false;\n        },\n        listItemAtIndexHasClass: function () {\n          return false;\n        },\n        notifyAction: function () {\n          return undefined;\n        },\n        removeClassForElementIndex: function () {\n          return undefined;\n        },\n        setAttributeForElementIndex: function () {\n          return undefined;\n        },\n        setCheckedCheckboxOrRadioAtIndex: function () {\n          return undefined;\n        },\n        setTabIndexForListItemChildren: function () {\n          return undefined;\n        },\n        getPrimaryTextAtIndex: function () {\n          return '';\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCListFoundation.prototype.layout = function () {\n    if (this.adapter.getListItemCount() === 0) {\n      return;\n    }\n\n    if (this.adapter.hasCheckboxAtIndex(0)) {\n      this.isCheckboxList_ = true;\n    } else if (this.adapter.hasRadioAtIndex(0)) {\n      this.isRadioList_ = true;\n    }\n\n    if (this.hasTypeahead) {\n      this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n    }\n  };\n  /**\n   * Sets the private wrapFocus_ variable.\n   */\n\n\n  MDCListFoundation.prototype.setWrapFocus = function (value) {\n    this.wrapFocus_ = value;\n  };\n  /**\n   * Sets the isVertical_ private variable.\n   */\n\n\n  MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n    this.isVertical_ = value;\n  };\n  /**\n   * Sets the isSingleSelectionList_ private variable.\n   */\n\n\n  MDCListFoundation.prototype.setSingleSelection = function (value) {\n    this.isSingleSelectionList_ = value;\n  };\n  /**\n   * Sets whether typeahead is enabled on the list.\n   * @param hasTypeahead Whether typeahead is enabled.\n   */\n\n\n  MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {\n    this.hasTypeahead = hasTypeahead;\n\n    if (hasTypeahead) {\n      this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n    }\n  };\n  /**\n   * @return Whether typeahead is currently matching a user-specified prefix.\n   */\n\n\n  MDCListFoundation.prototype.isTypeaheadInProgress = function () {\n    return this.hasTypeahead && typeahead.isTypingInProgress(this.typeaheadState);\n  };\n  /**\n   * Sets the useActivatedClass_ private variable.\n   */\n\n\n  MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n    this.useActivatedClass_ = useActivated;\n  };\n\n  MDCListFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex_;\n  };\n\n  MDCListFoundation.prototype.setSelectedIndex = function (index) {\n    if (!this.isIndexValid_(index)) {\n      return;\n    }\n\n    if (this.isCheckboxList_) {\n      this.setCheckboxAtIndex_(index);\n    } else if (this.isRadioList_) {\n      this.setRadioAtIndex_(index);\n    } else {\n      this.setSingleSelectionAtIndex_(index);\n    }\n  };\n  /**\n   * Focus in handler for the list items.\n   */\n\n\n  MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.focusedItemIndex = listItemIndex;\n      this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');\n    }\n  };\n  /**\n   * Focus out handler for the list items.\n   */\n\n\n  MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {\n    var _this = this;\n\n    if (listItemIndex >= 0) {\n      this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');\n    }\n    /**\n     * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\n     * is moved to next element.\n     */\n\n\n    setTimeout(function () {\n      if (!_this.adapter.isFocusInsideList()) {\n        _this.setTabindexToFirstSelectedItem_();\n      }\n    }, 0);\n  };\n  /**\n   * Key handler for the list.\n   */\n\n\n  MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {\n    var _this = this;\n\n    var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n    var isArrowUp = normalizeKey(event) === 'ArrowUp';\n    var isArrowRight = normalizeKey(event) === 'ArrowRight';\n    var isArrowDown = normalizeKey(event) === 'ArrowDown';\n    var isHome = normalizeKey(event) === 'Home';\n    var isEnd = normalizeKey(event) === 'End';\n    var isEnter = normalizeKey(event) === 'Enter';\n    var isSpace = normalizeKey(event) === 'Spacebar';\n\n    if (this.adapter.isRootFocused()) {\n      if (isArrowUp || isEnd) {\n        event.preventDefault();\n        this.focusLastElement();\n      } else if (isArrowDown || isHome) {\n        event.preventDefault();\n        this.focusFirstElement();\n      }\n\n      if (this.hasTypeahead) {\n        var handleKeydownOpts = {\n          event: event,\n          focusItemAtIndex: function (index) {\n            _this.focusItemAtIndex(index);\n          },\n          focusedItemIndex: -1,\n          isTargetListItem: isRootListItem,\n          sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n          isItemAtIndexDisabled: function (index) {\n            return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n          }\n        };\n        typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n      }\n\n      return;\n    }\n\n    var currentIndex = this.adapter.getFocusedElementIndex();\n\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-list-item ancestor from the\n        // current list (not from a sublist), return early.\n        return;\n      }\n    }\n\n    if (this.isVertical_ && isArrowDown || !this.isVertical_ && isArrowRight) {\n      preventDefaultEvent(event);\n      this.focusNextElement(currentIndex);\n    } else if (this.isVertical_ && isArrowUp || !this.isVertical_ && isArrowLeft) {\n      preventDefaultEvent(event);\n      this.focusPrevElement(currentIndex);\n    } else if (isHome) {\n      preventDefaultEvent(event);\n      this.focusFirstElement();\n    } else if (isEnd) {\n      preventDefaultEvent(event);\n      this.focusLastElement();\n    } else if (isEnter || isSpace) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\n        var target = event.target;\n\n        if (target && target.tagName === 'A' && isEnter) {\n          return;\n        }\n\n        preventDefaultEvent(event);\n\n        if (this.adapter.listItemAtIndexHasClass(currentIndex, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n          return;\n        }\n\n        if (!this.isTypeaheadInProgress()) {\n          if (this.isSelectableList_()) {\n            this.setSelectedIndexOnAction_(currentIndex);\n          }\n\n          this.adapter.notifyAction(currentIndex);\n        }\n      }\n    }\n\n    if (this.hasTypeahead) {\n      var handleKeydownOpts = {\n        event: event,\n        focusItemAtIndex: function (index) {\n          _this.focusItemAtIndex(index);\n        },\n        focusedItemIndex: this.focusedItemIndex,\n        isTargetListItem: isRootListItem,\n        sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n        isItemAtIndexDisabled: function (index) {\n          return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n        }\n      };\n      typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n    }\n  };\n  /**\n   * Click handler for the list.\n   */\n\n\n  MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\n    if (index === numbers.UNSET_INDEX) {\n      return;\n    }\n\n    this.setTabindexAtIndex_(index);\n    this.focusedItemIndex = index;\n\n    if (this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n      return;\n    }\n\n    if (this.isSelectableList_()) {\n      this.setSelectedIndexOnAction_(index, toggleCheckbox);\n    }\n\n    this.adapter.notifyAction(index);\n  };\n  /**\n   * Focuses the next element on the list.\n   */\n\n\n  MDCListFoundation.prototype.focusNextElement = function (index) {\n    var count = this.adapter.getListItemCount();\n    var nextIndex = index + 1;\n\n    if (nextIndex >= count) {\n      if (this.wrapFocus_) {\n        nextIndex = 0;\n      } else {\n        // Return early because last item is already focused.\n        return index;\n      }\n    }\n\n    this.focusItemAtIndex(nextIndex);\n    return nextIndex;\n  };\n  /**\n   * Focuses the previous element on the list.\n   */\n\n\n  MDCListFoundation.prototype.focusPrevElement = function (index) {\n    var prevIndex = index - 1;\n\n    if (prevIndex < 0) {\n      if (this.wrapFocus_) {\n        prevIndex = this.adapter.getListItemCount() - 1;\n      } else {\n        // Return early because first item is already focused.\n        return index;\n      }\n    }\n\n    this.focusItemAtIndex(prevIndex);\n    return prevIndex;\n  };\n\n  MDCListFoundation.prototype.focusFirstElement = function () {\n    this.focusItemAtIndex(0);\n    return 0;\n  };\n\n  MDCListFoundation.prototype.focusLastElement = function () {\n    var lastIndex = this.adapter.getListItemCount() - 1;\n    this.focusItemAtIndex(lastIndex);\n    return lastIndex;\n  };\n  /**\n   * @param itemIndex Index of the list item\n   * @param isEnabled Sets the list item to enabled or disabled.\n   */\n\n\n  MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n    if (!this.isIndexValid_(itemIndex)) {\n      return;\n    }\n\n    if (isEnabled) {\n      this.adapter.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\n    } else {\n      this.adapter.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\n    }\n  };\n\n  MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {\n    if (this.selectedIndex_ === index) {\n      return;\n    }\n\n    var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n\n    if (this.useActivatedClass_) {\n      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n    }\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\n    }\n\n    this.adapter.addClassForElementIndex(index, selectedClassName);\n    this.setAriaForSingleSelectionAtIndex_(index);\n    this.selectedIndex_ = index;\n  };\n  /**\n   * Sets aria attribute for single selection at given index.\n   */\n\n\n  MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {\n    // Detect the presence of aria-current and get the value only during list initialization when it is in unset state.\n    if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n      this.ariaCurrentAttrValue_ = this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n    }\n\n    var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\n    var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');\n    }\n\n    var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';\n    this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n  };\n  /**\n   * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.\n   */\n\n\n  MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {\n    this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');\n    }\n\n    this.adapter.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');\n    this.selectedIndex_ = index;\n  };\n\n  MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {\n    for (var i = 0; i < this.adapter.getListItemCount(); i++) {\n      var isChecked = false;\n\n      if (index.indexOf(i) >= 0) {\n        isChecked = true;\n      }\n\n      this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n      this.adapter.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n    }\n\n    this.selectedIndex_ = index;\n  };\n\n  MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {\n    if (this.focusedItemIndex === numbers.UNSET_INDEX && index !== 0) {\n      // If no list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\n      this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');\n    } else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {\n      this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');\n    }\n\n    this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');\n  };\n  /**\n   * @return Return true if it is single selectin list, checkbox list or radio list.\n   */\n\n\n  MDCListFoundation.prototype.isSelectableList_ = function () {\n    return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\n  };\n\n  MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {\n    var targetIndex = 0;\n\n    if (this.isSelectableList_()) {\n      if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== numbers.UNSET_INDEX) {\n        targetIndex = this.selectedIndex_;\n      } else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {\n        targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) {\n          return Math.min(currentIndex, minIndex);\n        });\n      }\n    }\n\n    this.setTabindexAtIndex_(targetIndex);\n  };\n\n  MDCListFoundation.prototype.isIndexValid_ = function (index) {\n    var _this = this;\n\n    if (index instanceof Array) {\n      if (!this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n\n      if (index.length === 0) {\n        return true;\n      } else {\n        return index.some(function (i) {\n          return _this.isIndexInRange_(i);\n        });\n      }\n    } else if (typeof index === 'number') {\n      if (this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\n      }\n\n      return this.isIndexInRange_(index);\n    } else {\n      return false;\n    }\n  };\n\n  MDCListFoundation.prototype.isIndexInRange_ = function (index) {\n    var listSize = this.adapter.getListItemCount();\n    return index >= 0 && index < listSize;\n  };\n  /**\n   * Sets selected index on user action, toggles checkbox / radio based on toggleCheckbox value.\n   * User interaction should not toggle list item(s) when disabled.\n   */\n\n\n  MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {\n    if (toggleCheckbox === void 0) {\n      toggleCheckbox = true;\n    }\n\n    if (this.isCheckboxList_) {\n      this.toggleCheckboxAtIndex_(index, toggleCheckbox);\n    } else {\n      this.setSelectedIndex(index);\n    }\n  };\n\n  MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {\n    var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);\n\n    if (toggleCheckbox) {\n      isChecked = !isChecked;\n      this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n    }\n\n    this.adapter.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false'); // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\n\n    var selectedIndexes = this.selectedIndex_ === numbers.UNSET_INDEX ? [] : this.selectedIndex_.slice();\n\n    if (isChecked) {\n      selectedIndexes.push(index);\n    } else {\n      selectedIndexes = selectedIndexes.filter(function (i) {\n        return i !== index;\n      });\n    }\n\n    this.selectedIndex_ = selectedIndexes;\n  };\n\n  MDCListFoundation.prototype.focusItemAtIndex = function (index) {\n    this.setTabindexAtIndex_(index);\n    this.adapter.focusItemAtIndex(index);\n    this.focusedItemIndex = index;\n  };\n  /**\n   * Given the next desired character from the user, adds it to the typeahead\n   * buffer. Then, attempts to find the next option matching the buffer. Wraps\n   * around if at the end of options.\n   *\n   * @param nextChar The next character to add to the prefix buffer.\n   * @param startingIndex The index from which to start matching. Only relevant\n   *     when starting a new match sequence. To start a new match sequence,\n   *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n   *     to clear after a set interval defined in list foundation. Defaults to\n   *     the currently focused index.\n   * @return The index of the matched item, or -1 if no match.\n   */\n\n\n  MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {\n    var _this = this;\n\n    if (skipFocus === void 0) {\n      skipFocus = false;\n    }\n\n    var opts = {\n      focusItemAtIndex: function (index) {\n        _this.focusItemAtIndex(index);\n      },\n      focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,\n      nextChar: nextChar,\n      sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n      skipFocus: skipFocus,\n      isItemAtIndexDisabled: function (index) {\n        return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      }\n    };\n    return typeahead.matchItem(opts, this.typeaheadState);\n  };\n  /**\n   * Initializes the MDCListTextAndIndex data structure by indexing the current\n   * list items by primary text.\n   *\n   * @return The primary texts of all the list items sorted by first character.\n   */\n\n\n  MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {\n    return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);\n  };\n  /**\n   * Clears the typeahead buffer.\n   */\n\n\n  MDCListFoundation.prototype.clearTypeaheadBuffer = function () {\n    typeahead.clearBuffer(this.typeaheadState);\n  };\n\n  return MDCListFoundation;\n}(MDCFoundation);\n\nexport { MDCListFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCListFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { normalizeKey } from '@material/dom/keyboard';\nimport { cssClasses, numbers, strings } from './constants';\nimport * as typeahead from './typeahead';\nimport { preventDefaultEvent } from './events';\nfunction isNumberArray(selectedIndex) {\n    return selectedIndex instanceof Array;\n}\nvar MDCListFoundation = /** @class */ (function (_super) {\n    __extends(MDCListFoundation, _super);\n    function MDCListFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;\n        _this.wrapFocus_ = false;\n        _this.isVertical_ = true;\n        _this.isSingleSelectionList_ = false;\n        _this.selectedIndex_ = numbers.UNSET_INDEX;\n        _this.focusedItemIndex = numbers.UNSET_INDEX;\n        _this.useActivatedClass_ = false;\n        _this.ariaCurrentAttrValue_ = null;\n        _this.isCheckboxList_ = false;\n        _this.isRadioList_ = false;\n        _this.hasTypeahead = false;\n        // Transiently holds current typeahead prefix from user.\n        _this.typeaheadState = typeahead.initState();\n        _this.sortedIndexByFirstChar = new Map();\n        return _this;\n    }\n    Object.defineProperty(MDCListFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClassForElementIndex: function () { return undefined; },\n                focusItemAtIndex: function () { return undefined; },\n                getAttributeForElementIndex: function () { return null; },\n                getFocusedElementIndex: function () { return 0; },\n                getListItemCount: function () { return 0; },\n                hasCheckboxAtIndex: function () { return false; },\n                hasRadioAtIndex: function () { return false; },\n                isCheckboxCheckedAtIndex: function () { return false; },\n                isFocusInsideList: function () { return false; },\n                isRootFocused: function () { return false; },\n                listItemAtIndexHasClass: function () { return false; },\n                notifyAction: function () { return undefined; },\n                removeClassForElementIndex: function () { return undefined; },\n                setAttributeForElementIndex: function () { return undefined; },\n                setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },\n                setTabIndexForListItemChildren: function () { return undefined; },\n                getPrimaryTextAtIndex: function () { return ''; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCListFoundation.prototype.layout = function () {\n        if (this.adapter.getListItemCount() === 0) {\n            return;\n        }\n        if (this.adapter.hasCheckboxAtIndex(0)) {\n            this.isCheckboxList_ = true;\n        }\n        else if (this.adapter.hasRadioAtIndex(0)) {\n            this.isRadioList_ = true;\n        }\n        if (this.hasTypeahead) {\n            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n        }\n    };\n    /**\n     * Sets the private wrapFocus_ variable.\n     */\n    MDCListFoundation.prototype.setWrapFocus = function (value) {\n        this.wrapFocus_ = value;\n    };\n    /**\n     * Sets the isVertical_ private variable.\n     */\n    MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n        this.isVertical_ = value;\n    };\n    /**\n     * Sets the isSingleSelectionList_ private variable.\n     */\n    MDCListFoundation.prototype.setSingleSelection = function (value) {\n        this.isSingleSelectionList_ = value;\n    };\n    /**\n     * Sets whether typeahead is enabled on the list.\n     * @param hasTypeahead Whether typeahead is enabled.\n     */\n    MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {\n        this.hasTypeahead = hasTypeahead;\n        if (hasTypeahead) {\n            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n        }\n    };\n    /**\n     * @return Whether typeahead is currently matching a user-specified prefix.\n     */\n    MDCListFoundation.prototype.isTypeaheadInProgress = function () {\n        return this.hasTypeahead &&\n            typeahead.isTypingInProgress(this.typeaheadState);\n    };\n    /**\n     * Sets the useActivatedClass_ private variable.\n     */\n    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n        this.useActivatedClass_ = useActivated;\n    };\n    MDCListFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex_;\n    };\n    MDCListFoundation.prototype.setSelectedIndex = function (index) {\n        if (!this.isIndexValid_(index)) {\n            return;\n        }\n        if (this.isCheckboxList_) {\n            this.setCheckboxAtIndex_(index);\n        }\n        else if (this.isRadioList_) {\n            this.setRadioAtIndex_(index);\n        }\n        else {\n            this.setSingleSelectionAtIndex_(index);\n        }\n    };\n    /**\n     * Focus in handler for the list items.\n     */\n    MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {\n        if (listItemIndex >= 0) {\n            this.focusedItemIndex = listItemIndex;\n            this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');\n        }\n    };\n    /**\n     * Focus out handler for the list items.\n     */\n    MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {\n        var _this = this;\n        if (listItemIndex >= 0) {\n            this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');\n        }\n        /**\n         * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\n         * is moved to next element.\n         */\n        setTimeout(function () {\n            if (!_this.adapter.isFocusInsideList()) {\n                _this.setTabindexToFirstSelectedItem_();\n            }\n        }, 0);\n    };\n    /**\n     * Key handler for the list.\n     */\n    MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {\n        var _this = this;\n        var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n        var isArrowUp = normalizeKey(event) === 'ArrowUp';\n        var isArrowRight = normalizeKey(event) === 'ArrowRight';\n        var isArrowDown = normalizeKey(event) === 'ArrowDown';\n        var isHome = normalizeKey(event) === 'Home';\n        var isEnd = normalizeKey(event) === 'End';\n        var isEnter = normalizeKey(event) === 'Enter';\n        var isSpace = normalizeKey(event) === 'Spacebar';\n        if (this.adapter.isRootFocused()) {\n            if (isArrowUp || isEnd) {\n                event.preventDefault();\n                this.focusLastElement();\n            }\n            else if (isArrowDown || isHome) {\n                event.preventDefault();\n                this.focusFirstElement();\n            }\n            if (this.hasTypeahead) {\n                var handleKeydownOpts = {\n                    event: event,\n                    focusItemAtIndex: function (index) {\n                        _this.focusItemAtIndex(index);\n                    },\n                    focusedItemIndex: -1,\n                    isTargetListItem: isRootListItem,\n                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n                    isItemAtIndexDisabled: function (index) {\n                        return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n                    },\n                };\n                typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n            }\n            return;\n        }\n        var currentIndex = this.adapter.getFocusedElementIndex();\n        if (currentIndex === -1) {\n            currentIndex = listItemIndex;\n            if (currentIndex < 0) {\n                // If this event doesn't have a mdc-list-item ancestor from the\n                // current list (not from a sublist), return early.\n                return;\n            }\n        }\n        if ((this.isVertical_ && isArrowDown) || (!this.isVertical_ && isArrowRight)) {\n            preventDefaultEvent(event);\n            this.focusNextElement(currentIndex);\n        }\n        else if ((this.isVertical_ && isArrowUp) || (!this.isVertical_ && isArrowLeft)) {\n            preventDefaultEvent(event);\n            this.focusPrevElement(currentIndex);\n        }\n        else if (isHome) {\n            preventDefaultEvent(event);\n            this.focusFirstElement();\n        }\n        else if (isEnd) {\n            preventDefaultEvent(event);\n            this.focusLastElement();\n        }\n        else if (isEnter || isSpace) {\n            if (isRootListItem) {\n                // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\n                var target = event.target;\n                if (target && target.tagName === 'A' && isEnter) {\n                    return;\n                }\n                preventDefaultEvent(event);\n                if (this.adapter.listItemAtIndexHasClass(currentIndex, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n                    return;\n                }\n                if (!this.isTypeaheadInProgress()) {\n                    if (this.isSelectableList_()) {\n                        this.setSelectedIndexOnAction_(currentIndex);\n                    }\n                    this.adapter.notifyAction(currentIndex);\n                }\n            }\n        }\n        if (this.hasTypeahead) {\n            var handleKeydownOpts = {\n                event: event,\n                focusItemAtIndex: function (index) {\n                    _this.focusItemAtIndex(index);\n                },\n                focusedItemIndex: this.focusedItemIndex,\n                isTargetListItem: isRootListItem,\n                sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n                isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS); },\n            };\n            typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n        }\n    };\n    /**\n     * Click handler for the list.\n     */\n    MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\n        if (index === numbers.UNSET_INDEX) {\n            return;\n        }\n        this.setTabindexAtIndex_(index);\n        this.focusedItemIndex = index;\n        if (this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n            return;\n        }\n        if (this.isSelectableList_()) {\n            this.setSelectedIndexOnAction_(index, toggleCheckbox);\n        }\n        this.adapter.notifyAction(index);\n    };\n    /**\n     * Focuses the next element on the list.\n     */\n    MDCListFoundation.prototype.focusNextElement = function (index) {\n        var count = this.adapter.getListItemCount();\n        var nextIndex = index + 1;\n        if (nextIndex >= count) {\n            if (this.wrapFocus_) {\n                nextIndex = 0;\n            }\n            else {\n                // Return early because last item is already focused.\n                return index;\n            }\n        }\n        this.focusItemAtIndex(nextIndex);\n        return nextIndex;\n    };\n    /**\n     * Focuses the previous element on the list.\n     */\n    MDCListFoundation.prototype.focusPrevElement = function (index) {\n        var prevIndex = index - 1;\n        if (prevIndex < 0) {\n            if (this.wrapFocus_) {\n                prevIndex = this.adapter.getListItemCount() - 1;\n            }\n            else {\n                // Return early because first item is already focused.\n                return index;\n            }\n        }\n        this.focusItemAtIndex(prevIndex);\n        return prevIndex;\n    };\n    MDCListFoundation.prototype.focusFirstElement = function () {\n        this.focusItemAtIndex(0);\n        return 0;\n    };\n    MDCListFoundation.prototype.focusLastElement = function () {\n        var lastIndex = this.adapter.getListItemCount() - 1;\n        this.focusItemAtIndex(lastIndex);\n        return lastIndex;\n    };\n    /**\n     * @param itemIndex Index of the list item\n     * @param isEnabled Sets the list item to enabled or disabled.\n     */\n    MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n        if (!this.isIndexValid_(itemIndex)) {\n            return;\n        }\n        if (isEnabled) {\n            this.adapter.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\n        }\n        else {\n            this.adapter.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\n        }\n    };\n    MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {\n        if (this.selectedIndex_ === index) {\n            return;\n        }\n        var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n        if (this.useActivatedClass_) {\n            selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n        }\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n            this.adapter.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\n        }\n        this.adapter.addClassForElementIndex(index, selectedClassName);\n        this.setAriaForSingleSelectionAtIndex_(index);\n        this.selectedIndex_ = index;\n    };\n    /**\n     * Sets aria attribute for single selection at given index.\n     */\n    MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {\n        // Detect the presence of aria-current and get the value only during list initialization when it is in unset state.\n        if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n            this.ariaCurrentAttrValue_ =\n                this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n        }\n        var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\n        var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n            this.adapter.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');\n        }\n        var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';\n        this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n    };\n    /**\n     * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.\n     */\n    MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {\n        this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);\n        if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n            this.adapter.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');\n        }\n        this.adapter.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');\n        this.selectedIndex_ = index;\n    };\n    MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {\n        for (var i = 0; i < this.adapter.getListItemCount(); i++) {\n            var isChecked = false;\n            if (index.indexOf(i) >= 0) {\n                isChecked = true;\n            }\n            this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n            this.adapter.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n        }\n        this.selectedIndex_ = index;\n    };\n    MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {\n        if (this.focusedItemIndex === numbers.UNSET_INDEX && index !== 0) {\n            // If no list item was selected set first list item's tabindex to -1.\n            // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\n            this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');\n        }\n        else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {\n            this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');\n        }\n        this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');\n    };\n    /**\n     * @return Return true if it is single selectin list, checkbox list or radio list.\n     */\n    MDCListFoundation.prototype.isSelectableList_ = function () {\n        return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\n    };\n    MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {\n        var targetIndex = 0;\n        if (this.isSelectableList_()) {\n            if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== numbers.UNSET_INDEX) {\n                targetIndex = this.selectedIndex_;\n            }\n            else if (isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {\n                targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) { return Math.min(currentIndex, minIndex); });\n            }\n        }\n        this.setTabindexAtIndex_(targetIndex);\n    };\n    MDCListFoundation.prototype.isIndexValid_ = function (index) {\n        var _this = this;\n        if (index instanceof Array) {\n            if (!this.isCheckboxList_) {\n                throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n            }\n            if (index.length === 0) {\n                return true;\n            }\n            else {\n                return index.some(function (i) { return _this.isIndexInRange_(i); });\n            }\n        }\n        else if (typeof index === 'number') {\n            if (this.isCheckboxList_) {\n                throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\n            }\n            return this.isIndexInRange_(index);\n        }\n        else {\n            return false;\n        }\n    };\n    MDCListFoundation.prototype.isIndexInRange_ = function (index) {\n        var listSize = this.adapter.getListItemCount();\n        return index >= 0 && index < listSize;\n    };\n    /**\n     * Sets selected index on user action, toggles checkbox / radio based on toggleCheckbox value.\n     * User interaction should not toggle list item(s) when disabled.\n     */\n    MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {\n        if (toggleCheckbox === void 0) { toggleCheckbox = true; }\n        if (this.isCheckboxList_) {\n            this.toggleCheckboxAtIndex_(index, toggleCheckbox);\n        }\n        else {\n            this.setSelectedIndex(index);\n        }\n    };\n    MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {\n        var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);\n        if (toggleCheckbox) {\n            isChecked = !isChecked;\n            this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n        }\n        this.adapter.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n        // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\n        var selectedIndexes = this.selectedIndex_ === numbers.UNSET_INDEX ? [] : this.selectedIndex_.slice();\n        if (isChecked) {\n            selectedIndexes.push(index);\n        }\n        else {\n            selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });\n        }\n        this.selectedIndex_ = selectedIndexes;\n    };\n    MDCListFoundation.prototype.focusItemAtIndex = function (index) {\n        this.setTabindexAtIndex_(index);\n        this.adapter.focusItemAtIndex(index);\n        this.focusedItemIndex = index;\n    };\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Only relevant\n     *     when starting a new match sequence. To start a new match sequence,\n     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n     *     to clear after a set interval defined in list foundation. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item, or -1 if no match.\n     */\n    MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {\n        var _this = this;\n        if (skipFocus === void 0) { skipFocus = false; }\n        var opts = {\n            focusItemAtIndex: function (index) {\n                _this.focusItemAtIndex(index);\n            },\n            focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,\n            nextChar: nextChar,\n            sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n            skipFocus: skipFocus,\n            isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS); }\n        };\n        return typeahead.matchItem(opts, this.typeaheadState);\n    };\n    /**\n     * Initializes the MDCListTextAndIndex data structure by indexing the current\n     * list items by primary text.\n     *\n     * @return The primary texts of all the list items sorted by first character.\n     */\n    MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {\n        return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);\n    };\n    /**\n     * Clears the typeahead buffer.\n     */\n    MDCListFoundation.prototype.clearTypeaheadBuffer = function () {\n        typeahead.clearBuffer(this.typeaheadState);\n    };\n    return MDCListFoundation;\n}(MDCFoundation));\nexport { MDCListFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCListFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}