{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCircularProgressFoundation } from './foundation';\n\nvar MDCCircularProgress =\n/** @class */\nfunction (_super) {\n  __extends(MDCCircularProgress, _super);\n\n  function MDCCircularProgress() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCCircularProgress.prototype.initialize = function () {\n    this.determinateCircle_ = this.root.querySelector(MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);\n  };\n\n  MDCCircularProgress.attachTo = function (root) {\n    return new MDCCircularProgress(root);\n  };\n\n  Object.defineProperty(MDCCircularProgress.prototype, \"determinate\", {\n    /**\n     * Sets whether the progress indicator is in determinate mode.\n     * @param isDeterminate Whether the indicator should be determinate.\n     */\n    set: function (value) {\n      this.foundation.setDeterminate(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCircularProgress.prototype, \"progress\", {\n    /**\n     * Sets the current progress value. In indeterminate mode, this has no\n     * visual effect but will be reflected if the indicator is switched to\n     * determinate mode.\n     * @param value The current progress value, which must be between 0 and 1.\n     */\n    set: function (value) {\n      this.foundation.setProgress(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCircularProgress.prototype, \"isClosed\", {\n    /**\n     * Whether the progress indicator is hidden.\n     */\n    get: function () {\n      return this.foundation.isClosed();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Shows the progress indicator.\n   */\n\n  MDCCircularProgress.prototype.open = function () {\n    this.foundation.open();\n  };\n  /**\n   * Hides the progress indicator.\n   */\n\n\n  MDCCircularProgress.prototype.close = function () {\n    this.foundation.close();\n  };\n\n  MDCCircularProgress.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take\n    // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n    // methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      getDeterminateCircleAttribute: function (attributeName) {\n        return _this.determinateCircle_.getAttribute(attributeName);\n      },\n      hasClass: function (className) {\n        return _this.root.classList.contains(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      removeAttribute: function (attributeName) {\n        return _this.root.removeAttribute(attributeName);\n      },\n      setAttribute: function (attributeName, value) {\n        return _this.root.setAttribute(attributeName, value);\n      },\n      setDeterminateCircleAttribute: function (attributeName, value) {\n        return _this.determinateCircle_.setAttribute(attributeName, value);\n      }\n    };\n    return new MDCCircularProgressFoundation(adapter);\n  };\n\n  return MDCCircularProgress;\n}(MDCComponent);\n\nexport { MDCCircularProgress };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCircularProgressFoundation } from './foundation';\nvar MDCCircularProgress = /** @class */ (function (_super) {\n    __extends(MDCCircularProgress, _super);\n    function MDCCircularProgress() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCCircularProgress.prototype.initialize = function () {\n        this.determinateCircle_ = this.root.querySelector(MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);\n    };\n    MDCCircularProgress.attachTo = function (root) {\n        return new MDCCircularProgress(root);\n    };\n    Object.defineProperty(MDCCircularProgress.prototype, \"determinate\", {\n        /**\n         * Sets whether the progress indicator is in determinate mode.\n         * @param isDeterminate Whether the indicator should be determinate.\n         */\n        set: function (value) {\n            this.foundation.setDeterminate(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCircularProgress.prototype, \"progress\", {\n        /**\n         * Sets the current progress value. In indeterminate mode, this has no\n         * visual effect but will be reflected if the indicator is switched to\n         * determinate mode.\n         * @param value The current progress value, which must be between 0 and 1.\n         */\n        set: function (value) {\n            this.foundation.setProgress(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCCircularProgress.prototype, \"isClosed\", {\n        /**\n         * Whether the progress indicator is hidden.\n         */\n        get: function () {\n            return this.foundation.isClosed();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Shows the progress indicator.\n     */\n    MDCCircularProgress.prototype.open = function () {\n        this.foundation.open();\n    };\n    /**\n     * Hides the progress indicator.\n     */\n    MDCCircularProgress.prototype.close = function () {\n        this.foundation.close();\n    };\n    MDCCircularProgress.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take\n        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n        // methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            getDeterminateCircleAttribute: function (attributeName) {\n                return _this.determinateCircle_.getAttribute(attributeName);\n            },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            removeAttribute: function (attributeName) {\n                return _this.root.removeAttribute(attributeName);\n            },\n            setAttribute: function (attributeName, value) {\n                return _this.root.setAttribute(attributeName, value);\n            },\n            setDeterminateCircleAttribute: function (attributeName, value) {\n                return _this.determinateCircle_.setAttribute(attributeName, value);\n            },\n        };\n        return new MDCCircularProgressFoundation(adapter);\n    };\n    return MDCCircularProgress;\n}(MDCComponent));\nexport { MDCCircularProgress };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}