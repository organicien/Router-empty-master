{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __values } from \"tslib\";\nimport { strings } from './constants';\nvar AUTO_INIT_ATTR = strings.AUTO_INIT_ATTR,\n    AUTO_INIT_STATE_ATTR = strings.AUTO_INIT_STATE_ATTR,\n    INITIALIZED_STATE = strings.INITIALIZED_STATE;\nvar registry = {};\nvar CONSOLE_WARN = console.warn.bind(console); // tslint:disable-line:no-console\n\nfunction emit(evtType, evtData, shouldBubble) {\n  if (shouldBubble === void 0) {\n    shouldBubble = false;\n  }\n\n  var evt;\n\n  if (typeof CustomEvent === 'function') {\n    evt = new CustomEvent(evtType, {\n      bubbles: shouldBubble,\n      detail: evtData\n    });\n  } else {\n    evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n  }\n\n  document.dispatchEvent(evt);\n}\n/* istanbul ignore next: optional argument is not a branch statement */\n\n/**\n * Auto-initializes all MDC components on a page.\n */\n\n\nfunction mdcAutoInit(root) {\n  var e_1, _a;\n\n  if (root === void 0) {\n    root = document;\n  }\n\n  var components = [];\n  var nodes = [].slice.call(root.querySelectorAll(\"[\" + AUTO_INIT_ATTR + \"]\"));\n  nodes = nodes.filter(function (node) {\n    return node.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE;\n  });\n\n  try {\n    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {\n      var node = nodes_1_1.value;\n      var ctorName = node.getAttribute(AUTO_INIT_ATTR);\n\n      if (!ctorName) {\n        throw new Error('(mdc-auto-init) Constructor name must be given.');\n      }\n\n      var Constructor = registry[ctorName]; // tslint:disable-line:variable-name\n\n      if (typeof Constructor !== 'function') {\n        throw new Error(\"(mdc-auto-init) Could not find constructor in registry for \" + ctorName);\n      } // TODO: Should we make an eslint rule for an attachTo() static method?\n      // See https://github.com/Microsoft/TypeScript/issues/14600 for discussion of static interface support in TS\n\n\n      var component = Constructor.attachTo(node);\n      Object.defineProperty(node, ctorName, {\n        configurable: true,\n        enumerable: false,\n        value: component,\n        writable: false\n      });\n      components.push(component);\n      node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  emit('MDCAutoInit:End', {});\n  return components;\n} // Constructor is PascalCased because it is a direct reference to a class, rather than an instance of a class.\n// tslint:disable-next-line:variable-name\n\n\nmdcAutoInit.register = function (componentName, Constructor, warn) {\n  if (warn === void 0) {\n    warn = CONSOLE_WARN;\n  }\n\n  if (typeof Constructor !== 'function') {\n    throw new Error(\"(mdc-auto-init) Invalid Constructor value: \" + Constructor + \". Expected function.\");\n  }\n\n  var registryValue = registry[componentName];\n\n  if (registryValue) {\n    warn(\"(mdc-auto-init) Overriding registration for \" + componentName + \" with \" + Constructor + \". Was: \" + registryValue);\n  }\n\n  registry[componentName] = Constructor;\n};\n\nmdcAutoInit.deregister = function (componentName) {\n  delete registry[componentName];\n};\n/** @nocollapse */\n\n\nmdcAutoInit.deregisterAll = function () {\n  var keys = Object.keys(registry);\n  keys.forEach(this.deregister, this);\n}; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\n\nexport default mdcAutoInit;\nexport { mdcAutoInit };","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __values } from \"tslib\";\nimport { strings } from './constants';\nvar AUTO_INIT_ATTR = strings.AUTO_INIT_ATTR, AUTO_INIT_STATE_ATTR = strings.AUTO_INIT_STATE_ATTR, INITIALIZED_STATE = strings.INITIALIZED_STATE;\nvar registry = {};\nvar CONSOLE_WARN = console.warn.bind(console); // tslint:disable-line:no-console\nfunction emit(evtType, evtData, shouldBubble) {\n    if (shouldBubble === void 0) { shouldBubble = false; }\n    var evt;\n    if (typeof CustomEvent === 'function') {\n        evt = new CustomEvent(evtType, {\n            bubbles: shouldBubble,\n            detail: evtData,\n        });\n    }\n    else {\n        evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n    }\n    document.dispatchEvent(evt);\n}\n/* istanbul ignore next: optional argument is not a branch statement */\n/**\n * Auto-initializes all MDC components on a page.\n */\nfunction mdcAutoInit(root) {\n    var e_1, _a;\n    if (root === void 0) { root = document; }\n    var components = [];\n    var nodes = [].slice.call(root.querySelectorAll(\"[\" + AUTO_INIT_ATTR + \"]\"));\n    nodes = nodes.filter(function (node) { return node.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE; });\n    try {\n        for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {\n            var node = nodes_1_1.value;\n            var ctorName = node.getAttribute(AUTO_INIT_ATTR);\n            if (!ctorName) {\n                throw new Error('(mdc-auto-init) Constructor name must be given.');\n            }\n            var Constructor = registry[ctorName]; // tslint:disable-line:variable-name\n            if (typeof Constructor !== 'function') {\n                throw new Error(\"(mdc-auto-init) Could not find constructor in registry for \" + ctorName);\n            }\n            // TODO: Should we make an eslint rule for an attachTo() static method?\n            // See https://github.com/Microsoft/TypeScript/issues/14600 for discussion of static interface support in TS\n            var component = Constructor.attachTo(node);\n            Object.defineProperty(node, ctorName, {\n                configurable: true,\n                enumerable: false,\n                value: component,\n                writable: false,\n            });\n            components.push(component);\n            node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    emit('MDCAutoInit:End', {});\n    return components;\n}\n// Constructor is PascalCased because it is a direct reference to a class, rather than an instance of a class.\n// tslint:disable-next-line:variable-name\nmdcAutoInit.register = function (componentName, Constructor, warn) {\n    if (warn === void 0) { warn = CONSOLE_WARN; }\n    if (typeof Constructor !== 'function') {\n        throw new Error(\"(mdc-auto-init) Invalid Constructor value: \" + Constructor + \". Expected function.\");\n    }\n    var registryValue = registry[componentName];\n    if (registryValue) {\n        warn(\"(mdc-auto-init) Overriding registration for \" + componentName + \" with \" + Constructor + \". Was: \" + registryValue);\n    }\n    registry[componentName] = Constructor;\n};\nmdcAutoInit.deregister = function (componentName) {\n    delete registry[componentName];\n};\n/** @nocollapse */\nmdcAutoInit.deregisterAll = function () {\n    var keys = Object.keys(registry);\n    keys.forEach(this.deregister, this);\n};\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default mdcAutoInit;\nexport { mdcAutoInit };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}